{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\habibars\\\\Downloads\\\\Network monitoring\\\\intrusion_detection\\\\Random forest model\\\\dashboard\\\\frontend\\\\src\\\\components\\\\BarChart.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BarChart(_ref) {\n  _s();\n  let {\n    predictions\n  } = _ref;\n  const chartRef = useRef(null);\n  //console.log(predictions);\n\n  // This useEffect hook runs whenever the \"predictions\" prop changes.\n  useEffect(() => {\n    // Destroy the previous chart instance, if any.\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n\n    // Transform the \"predictions\" data into a format that can be used by the chart.\n    const data = predictions.reduce((acc, item) => {\n      const date = new Date(item.date).toLocaleDateString('en-US', {\n        weekday: 'long'\n      });\n      const countByDate = acc[date] || {\n        XSS: 0,\n        DDoS: 0,\n        BENIGN: 0,\n        date\n      };\n      countByDate[item.prediction] += 1;\n      acc[date] = countByDate;\n      return acc;\n    }, {});\n\n    // Calculate the total number of \"ATTACK\" and \"BENIGN\" predictions.\n    let totalAttack = 0;\n    let totalBenign = 0;\n    Object.values(data).forEach(d => {\n      totalAttack += d['DDoS'] + d['XSS'] || 0;\n      totalBenign += d['BENIGN'] || 0;\n    });\n\n    // Define the chart data and options.\n    const chartData = {\n      labels: Object.keys(data),\n      datasets: [{\n        label: 'XSS: ' + totalAttack,\n        data: Object.values(data).map(d => d.XSS || 0),\n        backgroundColor: 'blue'\n      }, {\n        label: 'DDoS',\n        data: Object.values(data).map(d => d.DDoS || 0),\n        backgroundColor: 'blue'\n      }, {\n        label: 'Benign : ' + totalBenign,\n        data: Object.values(data).map(d => d.BENIGN || 0),\n        backgroundColor: 'green'\n      }]\n    };\n    const chartConfig = {\n      type: 'bar',\n      data: chartData,\n      options: {\n        maintainAspectRatio: false,\n        plugins: {\n          title: {\n            display: true,\n            text: 'Bar Chart'\n          }\n        },\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    };\n\n    // Get the canvas context and create a new chart instance.\n    const ctx = document.getElementById('BarChart').getContext('2d');\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n    chartRef.current = new Chart(ctx, chartConfig);\n  }, [predictions]); // The \"predictions\" prop is the dependency of this useEffect hook.\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"BarChart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 10\n  }, this);\n}\n_s(BarChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = BarChart;\nexport default BarChart;\nvar _c;\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["useEffect","useRef","Chart","jsxDEV","_jsxDEV","BarChart","_ref","_s","predictions","chartRef","current","destroy","data","reduce","acc","item","date","Date","toLocaleDateString","weekday","countByDate","XSS","DDoS","BENIGN","prediction","totalAttack","totalBenign","Object","values","forEach","d","chartData","labels","keys","datasets","label","map","backgroundColor","chartConfig","type","options","maintainAspectRatio","plugins","title","display","text","scales","y","beginAtZero","ctx","document","getElementById","getContext","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/habibars/Downloads/Network monitoring/intrusion_detection/Random forest model/dashboard/frontend/src/components/BarChart.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction BarChart({ predictions }) {\r\n  const chartRef = useRef(null);\r\n  //console.log(predictions);\r\n\r\n  // This useEffect hook runs whenever the \"predictions\" prop changes.\r\n  useEffect(() => {\r\n    // Destroy the previous chart instance, if any.\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n\r\n    // Transform the \"predictions\" data into a format that can be used by the chart.\r\n    const data = predictions.reduce((acc, item) => {\r\n      const date = new Date(item.date).toLocaleDateString('en-US', {\r\n        weekday: 'long',\r\n      });\r\n    \r\n      const countByDate = acc[date] || {\r\n        XSS: 0,\r\n        DDoS: 0,\r\n        BENIGN: 0,\r\n        date,\r\n      };\r\n    \r\n      countByDate[item.prediction] += 1;\r\n      acc[date] = countByDate;\r\n      return acc;\r\n    }, {});\r\n\r\n    // Calculate the total number of \"ATTACK\" and \"BENIGN\" predictions.\r\n    let totalAttack = 0;\r\n    let totalBenign = 0;\r\n    Object.values(data).forEach((d) => {\r\n        totalAttack += d['DDoS'] + d['XSS'] || 0;\r\n        totalBenign += d['BENIGN'] || 0;\r\n    });\r\n \r\n    // Define the chart data and options.\r\n    const chartData = {\r\n      labels: Object.keys(data),\r\n      datasets: [\r\n        {\r\n          label: 'XSS: ' + totalAttack,\r\n          data: Object.values(data).map((d) => d.XSS || 0),\r\n          backgroundColor: 'blue',\r\n        },\r\n        {\r\n          label: 'DDoS',\r\n          data: Object.values(data).map((d) => d.DDoS || 0),\r\n          backgroundColor: 'blue',\r\n        },\r\n        {\r\n          label: 'Benign : ' + totalBenign,\r\n          data: Object.values(data).map((d) => d.BENIGN || 0),\r\n          backgroundColor: 'green',\r\n        },\r\n      ],\r\n    };\r\n\r\n    const chartConfig = {\r\n      type: 'bar',\r\n      data: chartData,\r\n      options: {\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'Bar Chart'\r\n          }\r\n        },\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    // Get the canvas context and create a new chart instance.\r\n    const ctx = document.getElementById('BarChart').getContext('2d');\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n    chartRef.current = new Chart(ctx, chartConfig);\r\n  }, [predictions]); // The \"predictions\" prop is the dependency of this useEffect hook.\r\n\r\n  return <canvas id=\"BarChart\"></canvas>;\r\n}\r\n\r\nexport default BarChart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}