{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\habibars\\\\Downloads\\\\Network monitoring\\\\intrusion_detection\\\\Random forest model\\\\dashboard\\\\frontend\\\\src\\\\components\\\\BarChart.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BarChart(_ref) {\n  _s();\n  let {\n    predictions\n  } = _ref;\n  const chartRef = useRef(null);\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n    const data = predictions.reduce((acc, item) => {\n      const date = new Date(item.date).toLocaleDateString('en-US', {\n        weekday: 'long'\n      });\n      const count = acc[date] ? acc[date][item.prediction] + 1 : 1;\n      acc[date] = {\n        [item.prediction]: count,\n        date\n      };\n      return acc;\n    }, {});\n    const chartData = {\n      labels: Object.keys(data),\n      datasets: [{\n        label: 'Attacks',\n        data: Object.values(data).map(d => d['ATTACK'] || 0),\n        backgroundColor: 'blue'\n      }, {\n        label: 'Benign',\n        data: Object.values(data).map(d => d['BENIGN'] || 0),\n        backgroundColor: 'green'\n      }]\n    };\n    const chartConfig = {\n      type: 'bar',\n      data: chartData,\n      options: {\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        },\n        onClick: function (event) {\n          console.log(chartRef.current.controller);\n          if (chartRef.current.controller) {\n            const activeElements = chartRef.current.controller.getElementsAtEvent(event);\n            if (activeElements.length > 0) {\n              const chartData = activeElements[0]._chart.data;\n              const label = chartData.labels[activeElements[0]._index];\n              const value = chartData.datasets[activeElements[0]._datasetIndex].data[activeElements[0]._index];\n              if (value > 0) {\n                window.location.href = `/details?label=${label}&value=${value}`;\n              }\n            }\n          }\n        },\n        hover: {\n          mode: 'nearest',\n          intersect: true,\n          axis: 'x',\n          animationDuration: 0\n        }\n      }\n    };\n    const ctx = document.getElementById('BarChart').getContext('2d');\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n    chartRef.current = new Chart(ctx, chartConfig);\n  }, [predictions]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"BarChart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 10\n  }, this);\n}\n_s(BarChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = BarChart;\nexport default BarChart;\n\n/*\r\nimport { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction BarChart({ predictions }) {\r\n  const chartRef = useRef(null);\r\n\r\n  \r\n  // This useEffect hook runs whenever the \"predictions\" prop changes.\r\n  useEffect(() => {\r\n    // Destroy the previous chart instance, if any.\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n\r\n    // Transform the \"predictions\" data into a format that can be used by the chart.\r\n    const data = predictions.reduce((acc, item) => {\r\n      const date = new Date(item.date).toLocaleDateString('en-US', {\r\n        weekday: 'long',\r\n      });\r\n      const count = acc[date] ? acc[date][item.prediction] + 1 : 1;\r\n      acc[date] = {\r\n        [item.prediction]: count,\r\n        date,\r\n      };\r\n      return acc;\r\n    }, {});\r\n\r\n    // Define the chart data and options.\r\n    const chartData = {\r\n      labels: Object.keys(data),\r\n      datasets: [\r\n        {\r\n          label: 'Attacks',\r\n          data: Object.values(data).map((d) => d['ATTACK'] || 0),\r\n          backgroundColor: 'blue',\r\n        },\r\n        {\r\n          label: 'Benign',\r\n          data: Object.values(data).map((d) => d['BENIGN'] || 0),\r\n          backgroundColor: 'green',\r\n        },\r\n      ],\r\n    };\r\n\r\n    const chartConfig = {\r\n      type: 'bar',\r\n      data: chartData,\r\n      options: {\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    };\r\n    \r\n\r\n    // Get the canvas context and create a new chart instance.\r\n    const ctx = document.getElementById('BarChart').getContext('2d');\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n    chartRef.current = new Chart(ctx, chartConfig);\r\n\r\n  }, [predictions]); // The \"predictions\" prop is the dependency of this useEffect hook.\r\n\r\n  return <canvas id=\"BarChart\"></canvas>;\r\n}\r\n\r\nexport default BarChart;\r\n*/\nvar _c;\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["useEffect","useRef","Chart","jsxDEV","_jsxDEV","BarChart","_ref","_s","predictions","chartRef","current","destroy","data","reduce","acc","item","date","Date","toLocaleDateString","weekday","count","prediction","chartData","labels","Object","keys","datasets","label","values","map","d","backgroundColor","chartConfig","type","options","maintainAspectRatio","scales","y","beginAtZero","onClick","event","console","log","controller","activeElements","getElementsAtEvent","length","_chart","_index","value","_datasetIndex","window","location","href","hover","mode","intersect","axis","animationDuration","ctx","document","getElementById","getContext","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/habibars/Downloads/Network monitoring/intrusion_detection/Random forest model/dashboard/frontend/src/components/BarChart.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction BarChart({ predictions }) {\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n\r\n    const data = predictions.reduce((acc, item) => {\r\n      const date = new Date(item.date).toLocaleDateString('en-US', {\r\n        weekday: 'long',\r\n      });\r\n      const count = acc[date] ? acc[date][item.prediction] + 1 : 1;\r\n      acc[date] = {\r\n        [item.prediction]: count,\r\n        date,\r\n      };\r\n      return acc;\r\n    }, {});\r\n\r\n    const chartData = {\r\n      labels: Object.keys(data),\r\n      datasets: [\r\n        {\r\n          label: 'Attacks',\r\n          data: Object.values(data).map((d) => d['ATTACK'] || 0),\r\n          backgroundColor: 'blue',\r\n        },\r\n        {\r\n          label: 'Benign',\r\n          data: Object.values(data).map((d) => d['BENIGN'] || 0),\r\n          backgroundColor: 'green',\r\n        },\r\n      ],\r\n    };\r\n\r\n    const chartConfig = {\r\n      type: 'bar',\r\n      data: chartData,\r\n      options: {\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n        onClick: function (event) {\r\n          console.log(chartRef.current.controller);\r\n          if (chartRef.current.controller) {\r\n            const activeElements = chartRef.current.controller.getElementsAtEvent(event);\r\n            if (activeElements.length > 0) {\r\n              const chartData = activeElements[0]._chart.data;\r\n              const label = chartData.labels[activeElements[0]._index];\r\n              const value = chartData.datasets[activeElements[0]._datasetIndex].data[activeElements[0]._index];\r\n              if (value > 0) {\r\n                window.location.href = `/details?label=${label}&value=${value}`;\r\n              }\r\n            }\r\n          }\r\n        },\r\n        hover: {\r\n          mode: 'nearest',\r\n          intersect: true,\r\n          axis: 'x',\r\n          animationDuration: 0,\r\n        },\r\n      },\r\n    };\r\n\r\n    const ctx = document.getElementById('BarChart').getContext('2d');\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n    chartRef.current = new Chart(ctx, chartConfig);\r\n\r\n  }, [predictions]);\r\n\r\n  return <canvas id=\"BarChart\"></canvas>;\r\n}\r\n\r\nexport default BarChart;\r\n\r\n\r\n\r\n/*\r\nimport { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction BarChart({ predictions }) {\r\n  const chartRef = useRef(null);\r\n\r\n  \r\n  // This useEffect hook runs whenever the \"predictions\" prop changes.\r\n  useEffect(() => {\r\n    // Destroy the previous chart instance, if any.\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n\r\n    // Transform the \"predictions\" data into a format that can be used by the chart.\r\n    const data = predictions.reduce((acc, item) => {\r\n      const date = new Date(item.date).toLocaleDateString('en-US', {\r\n        weekday: 'long',\r\n      });\r\n      const count = acc[date] ? acc[date][item.prediction] + 1 : 1;\r\n      acc[date] = {\r\n        [item.prediction]: count,\r\n        date,\r\n      };\r\n      return acc;\r\n    }, {});\r\n\r\n    // Define the chart data and options.\r\n    const chartData = {\r\n      labels: Object.keys(data),\r\n      datasets: [\r\n        {\r\n          label: 'Attacks',\r\n          data: Object.values(data).map((d) => d['ATTACK'] || 0),\r\n          backgroundColor: 'blue',\r\n        },\r\n        {\r\n          label: 'Benign',\r\n          data: Object.values(data).map((d) => d['BENIGN'] || 0),\r\n          backgroundColor: 'green',\r\n        },\r\n      ],\r\n    };\r\n\r\n    const chartConfig = {\r\n      type: 'bar',\r\n      data: chartData,\r\n      options: {\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    };\r\n    \r\n\r\n    // Get the canvas context and create a new chart instance.\r\n    const ctx = document.getElementById('BarChart').getContext('2d');\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n    chartRef.current = new Chart(ctx, chartConfig);\r\n\r\n  }, [predictions]); // The \"predictions\" prop is the dependency of this useEffect hook.\r\n\r\n  return <canvas id=\"BarChart\"></canvas>;\r\n}\r\n\r\nexport default BarChart;\r\n*/"],"mappings":"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CAAC,EAAE,CAACxB,WAAW,CAAC,CAAC;EAEjB,oBAAOJ,OAAA;IAAQ2D,EAAE,EAAC;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAU;AACxC;AAAC5D,EAAA,CA9EQF,QAAQ;AAAA+D,EAAA,GAAR/D,QAAQ;AAgFjB,eAAeA,QAAQ;;AAIvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxEA,IAAA+D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}