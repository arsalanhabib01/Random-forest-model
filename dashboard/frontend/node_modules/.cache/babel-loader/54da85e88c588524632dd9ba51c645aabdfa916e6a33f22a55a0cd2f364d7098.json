{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\habibars\\\\Downloads\\\\Network monitoring\\\\intrusion_detection\\\\Random forest model\\\\dashboard\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useMemo } from 'react';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = 'http://localhost:5000/api';\nfunction App() {\n  _s();\n  const [predictions, setPredictions] = useState([]);\n  const chartRef = useRef(null);\n  useEffect(() => {\n    axios.get(`${baseURL}/get`).then(res => {\n      setPredictions(res.data);\n    });\n  }, []);\n  const chartData = useMemo(() => {\n    return predictions.reduce((acc, item) => {\n      const date = new Date(item.date).toLocaleDateString('en-US', {\n        weekday: 'long'\n      });\n      const count = acc[date] ? acc[date][item.prediction] + 1 : 1;\n      //console.log(count, item.prediction)\n      acc[date] = {\n        [item.prediction]: count,\n        date\n      };\n      return acc;\n    }, {});\n  }, [predictions]);\n  const chartConfig = useMemo(() => {\n    return {\n      type: 'bar',\n      data: {\n        labels: Object.keys(chartData),\n        datasets: [{\n          label: 'Attacks',\n          data: Object.values(chartData).map(d => d['attack'] || 0),\n          backgroundColor: 'blue'\n        }, {\n          label: 'BENIGN',\n          data: Object.values(chartData).map(d => d['BENIGN'] || 0),\n          backgroundColor: 'green'\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    };\n  }, [chartData]);\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n    const ctx = document.getElementById('myChart').getContext('2d');\n    chartRef.current = new Chart(ctx, chartConfig);\n  }, [chartConfig]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"myChart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"KfDk0bv3lYfdbvFbz3W4rxhiq+8=\");\n_c = App;\nexport default App;\n\n/*\nimport React, { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\n\nconst baseURL = 'http://localhost:5000/api';\n\n\n\nfunction App() {\n  const [predictions, setPredictions] = useState([]);\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    axios.get(`${baseURL}/get`).then((res) => {\n      setPredictions(res.data);\n      console.log(res.data);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n\n    const data = predictions.reduce((acc, item) => {\n      const date = new Date(item.date).toLocaleDateString('en-US', {\n        weekday: 'long',      });\n      const count = acc[date] ? acc[date][item.type] + 1 : 1;\n      acc[date] = {\n        [item.type]: count,\n        date,\n      };\n      return acc;\n    }, {});\n\n    const chartData = {\n      labels: Object.keys(data),\n      datasets: [\n        {\n          label: 'Attacks',\n          data: Object.values(data).map((d) => d['attack'] || 0),\n          backgroundColor: 'blue',\n        },\n        {\n          label: 'Benign',\n          data: Object.values(data).map((d) => d['benign'] || 0),\n          backgroundColor: 'green',\n        },\n      ],\n    };\n\n    const chartConfig = {\n      type: 'bar',\n      data: chartData,\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true,\n          },\n        },\n      },\n    };\n\n    const ctx = document.getElementById('myChart').getContext('2d');\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n    chartRef.current = new Chart(ctx, chartConfig);\n  }, [predictions]);\n\n  return (\n    <div>\n      <canvas id=\"myChart\"></canvas>\n    </div>\n  );\n}\n\nexport default App;\n\n*/\n\n/*\nimport React, { useEffect, useState } from 'react'\nimport axios from 'axios';\n\n// Command to run the frontend \"npm start\"\n\nconst baseURL = 'http://localhost:5000/api';\n\nfunction App() {\n  const [predictions, setPredictions] = useState([]);\n\n  useEffect(() =>  {\n    axios.get(`${baseURL}/get`)\n    .then((res) => {\n      //console.log(res.data);\n      setPredictions(res.data);\n    });\n  },);\n  \n  return (\n    <div>\n      {predictions.map(item => (\n        <div key={item._id}>\n          <h2>{item.prediction}</h2>\n          <p>{item.date}</p>\n        </div>\n      ))}\n      \n    </div>\n  )\n}\n\nexport default App\n*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useMemo","axios","Chart","jsxDEV","_jsxDEV","baseURL","App","_s","predictions","setPredictions","chartRef","get","then","res","data","chartData","reduce","acc","item","date","Date","toLocaleDateString","weekday","count","prediction","chartConfig","type","labels","Object","keys","datasets","label","values","map","d","backgroundColor","options","scales","y","beginAtZero","current","destroy","ctx","document","getElementById","getContext","children","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/habibars/Downloads/Network monitoring/intrusion_detection/Random forest model/dashboard/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useRef, useMemo } from 'react';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\n\nconst baseURL = 'http://localhost:5000/api';\n\nfunction App() {\n  const [predictions, setPredictions] = useState([]);\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    axios.get(`${baseURL}/get`).then((res) => {\n      setPredictions(res.data);\n    });\n  }, []);\n\n  const chartData = useMemo(() => {\n    return predictions.reduce((acc, item) => {\n      const date = new Date(item.date).toLocaleDateString('en-US', {\n        weekday: 'long',\n      });\n      const count = acc[date] ? acc[date][item.prediction] + 1 : 1;\n      //console.log(count, item.prediction)\n      acc[date] = {\n        [item.prediction]: count,\n        date,\n      };\n      return acc;\n    }, {});\n  }, [predictions]);\n\n  const chartConfig = useMemo(() => {\n    return {\n      type: 'bar',\n      data: {\n        labels: Object.keys(chartData),\n        datasets: [\n          {\n            label: 'Attacks',\n            data: Object.values(chartData).map((d) => d['attack'] || 0),\n            backgroundColor: 'blue',\n          },\n          {\n            label: 'BENIGN',\n            data: Object.values(chartData).map((d) => d['BENIGN'] || 0),\n            backgroundColor: 'green',\n          },\n        ],\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true,\n          },\n        },\n      },\n    };\n  }, [chartData]);\n\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n\n    const ctx = document.getElementById('myChart').getContext('2d');\n    chartRef.current = new Chart(ctx, chartConfig);\n  }, [chartConfig]);\n\n  return (\n    <div>\n      <canvas id=\"myChart\"></canvas>\n    </div>\n  );\n}\n\nexport default App;\n\n\n/*\nimport React, { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\n\nconst baseURL = 'http://localhost:5000/api';\n\n\n\nfunction App() {\n  const [predictions, setPredictions] = useState([]);\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    axios.get(`${baseURL}/get`).then((res) => {\n      setPredictions(res.data);\n      console.log(res.data);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n\n    const data = predictions.reduce((acc, item) => {\n      const date = new Date(item.date).toLocaleDateString('en-US', {\n        weekday: 'long',      });\n      const count = acc[date] ? acc[date][item.type] + 1 : 1;\n      acc[date] = {\n        [item.type]: count,\n        date,\n      };\n      return acc;\n    }, {});\n\n    const chartData = {\n      labels: Object.keys(data),\n      datasets: [\n        {\n          label: 'Attacks',\n          data: Object.values(data).map((d) => d['attack'] || 0),\n          backgroundColor: 'blue',\n        },\n        {\n          label: 'Benign',\n          data: Object.values(data).map((d) => d['benign'] || 0),\n          backgroundColor: 'green',\n        },\n      ],\n    };\n\n    const chartConfig = {\n      type: 'bar',\n      data: chartData,\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true,\n          },\n        },\n      },\n    };\n\n    const ctx = document.getElementById('myChart').getContext('2d');\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n    chartRef.current = new Chart(ctx, chartConfig);\n  }, [predictions]);\n\n  return (\n    <div>\n      <canvas id=\"myChart\"></canvas>\n    </div>\n  );\n}\n\nexport default App;\n\n*/\n\n/*\nimport React, { useEffect, useState } from 'react'\nimport axios from 'axios';\n\n// Command to run the frontend \"npm start\"\n\nconst baseURL = 'http://localhost:5000/api';\n\nfunction App() {\n  const [predictions, setPredictions] = useState([]);\n\n  useEffect(() =>  {\n    axios.get(`${baseURL}/get`)\n    .then((res) => {\n      //console.log(res.data);\n      setPredictions(res.data);\n    });\n  },);\n  \n  return (\n    <div>\n      {predictions.map(item => (\n        <div key={item._id}>\n          <h2>{item.prediction}</h2>\n          <p>{item.date}</p>\n        </div>\n      ))}\n      \n    </div>\n  )\n}\n\nexport default App\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}