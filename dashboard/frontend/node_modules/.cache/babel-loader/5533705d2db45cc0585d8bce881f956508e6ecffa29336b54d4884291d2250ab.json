{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\habibars\\\\Downloads\\\\Network monitoring\\\\intrusion_detection\\\\Random forest model\\\\dashboard\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Chart from './components/Chart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = 'http://localhost:5000/api';\nfunction App() {\n  _s();\n  const [predictions, setPredictions] = useState([]);\n  useEffect(() => {\n    axios.get(`${baseURL}/get`).then(res => {\n      setPredictions(res.data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Chart, {\n      data: predictions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zH5rPFTlWYOw2PPwe/kdtH2YoqI=\");\n_c = App;\nexport default App;\n\n/*\nimport React, { useEffect, useState, useRef, useMemo } from 'react';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\n\nconst baseURL = 'http://localhost:5000/api';\n\nfunction App() {\n  const [predictions, setPredictions] = useState([]);\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    axios.get(`${baseURL}/get`).then((res) => {\n      setPredictions(res.data);\n    });\n  }, []);\n\n  const chartData = useMemo(() => {\n    return predictions.reduce((acc, item) => {\n      const date = new Date(item.date).toLocaleDateString('en-US', {\n        weekday: 'long',\n      });\n      const count = acc[date] ? acc[date][item.prediction] + 1 : 1;\n      acc[date] = {\n        [item.prediction]: count,\n        date,\n      };\n      return acc;\n    }, {});\n  }, [predictions]);\n\n  const chartConfig = useMemo(() => {\n    return {\n      type: 'bar',\n      data: {\n        labels: Object.keys(chartData),\n        datasets: [\n          {\n            label: 'Attacks',\n            data: Object.values(chartData).map((d) => d['ATTACK'] || 0),\n            backgroundColor: 'blue',\n          },\n          {\n            label: 'Benign',\n            data: Object.values(chartData).map((d) => d['BENIGN'] || 0),\n            backgroundColor: 'green',\n          },\n        ],\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true,\n          },\n        },\n      },\n    };\n  }, [chartData]);\n\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n\n    const ctx = document.getElementById('myChart').getContext('2d');\n    chartRef.current = new Chart(ctx, chartConfig);\n  }, [chartConfig]);\n\n  return (\n    <div>\n      <canvas id=\"myChart\"></canvas>\n    </div>\n  );\n}\n\nexport default App;\n*/\n/*\nimport React, { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\n\nconst baseURL = 'http://localhost:5000/api';\n\n\n\nfunction App() {\n  const [predictions, setPredictions] = useState([]);\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    axios.get(`${baseURL}/get`).then((res) => {\n      setPredictions(res.data);\n      console.log(res.data);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n\n    const data = predictions.reduce((acc, item) => {\n      const date = new Date(item.date).toLocaleDateString('en-US', {\n        weekday: 'long',      });\n      const count = acc[date] ? acc[date][item.prediction] + 1 : 1;\n      acc[date] = {\n        [item.prediction]: count,\n        date,\n      };\n      return acc;\n    }, {});\n\n    const chartData = {\n      labels: Object.keys(data),\n      datasets: [\n        {\n          label: 'Attacks',\n          data: Object.values(data).map((d) => d['ATTACK'] || 0),\n          backgroundColor: 'blue',\n        },\n        {\n          label: 'Benign',\n          data: Object.values(data).map((d) => d['BENIGN'] || 0),\n          backgroundColor: 'green',\n        },\n      ],\n    };\n\n    const chartConfig = {\n      type: 'bar',\n      data: chartData,\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true,\n          },\n        },\n      },\n    };\n\n    const ctx = document.getElementById('myChart').getContext('2d');\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n    chartRef.current = new Chart(ctx, chartConfig);\n  }, [predictions]);\n\n  return (\n    <div>\n      <canvas id=\"myChart\"></canvas>\n    </div>\n  );\n}\n\nexport default App;\n\n*/\n/*\nimport React, { useEffect, useState } from 'react'\nimport axios from 'axios';\n\n// Command to run the frontend \"npm start\"\n\nconst baseURL = 'http://localhost:5000/api';\n\nfunction App() {\n  const [predictions, setPredictions] = useState([]);\n\n  useEffect(() =>  {\n    axios.get(`${baseURL}/get`)\n    .then((res) => {\n      //console.log(res.data);\n      setPredictions(res.data);\n    });\n  },);\n  \n  return (\n    <div>\n      {predictions.map(item => (\n        <div key={item._id}>\n          <h2>{item.prediction}</h2>\n          <p>{item.date}</p>\n        </div>\n      ))}\n      \n    </div>\n  )\n}\n\nexport default App\n*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","Chart","jsxDEV","_jsxDEV","baseURL","App","_s","predictions","setPredictions","get","then","res","data","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/habibars/Downloads/Network monitoring/intrusion_detection/Random forest model/dashboard/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Chart from './components/Chart';\n\nconst baseURL = 'http://localhost:5000/api';\n\nfunction App() {\n  const [predictions, setPredictions] = useState([]);\n\n  useEffect(() => {\n    axios.get(`${baseURL}/get`).then((res) => {\n      setPredictions(res.data);\n    });\n  }, []);\n\n  return (\n    <div>\n      <Chart data={predictions} />\n    </div>\n  );\n}\n\nexport default App;\n\n\n/*\nimport React, { useEffect, useState, useRef, useMemo } from 'react';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\n\nconst baseURL = 'http://localhost:5000/api';\n\nfunction App() {\n  const [predictions, setPredictions] = useState([]);\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    axios.get(`${baseURL}/get`).then((res) => {\n      setPredictions(res.data);\n    });\n  }, []);\n\n  const chartData = useMemo(() => {\n    return predictions.reduce((acc, item) => {\n      const date = new Date(item.date).toLocaleDateString('en-US', {\n        weekday: 'long',\n      });\n      const count = acc[date] ? acc[date][item.prediction] + 1 : 1;\n      acc[date] = {\n        [item.prediction]: count,\n        date,\n      };\n      return acc;\n    }, {});\n  }, [predictions]);\n\n  const chartConfig = useMemo(() => {\n    return {\n      type: 'bar',\n      data: {\n        labels: Object.keys(chartData),\n        datasets: [\n          {\n            label: 'Attacks',\n            data: Object.values(chartData).map((d) => d['ATTACK'] || 0),\n            backgroundColor: 'blue',\n          },\n          {\n            label: 'Benign',\n            data: Object.values(chartData).map((d) => d['BENIGN'] || 0),\n            backgroundColor: 'green',\n          },\n        ],\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true,\n          },\n        },\n      },\n    };\n  }, [chartData]);\n\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n\n    const ctx = document.getElementById('myChart').getContext('2d');\n    chartRef.current = new Chart(ctx, chartConfig);\n  }, [chartConfig]);\n\n  return (\n    <div>\n      <canvas id=\"myChart\"></canvas>\n    </div>\n  );\n}\n\nexport default App;\n*/\n/*\nimport React, { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\n\nconst baseURL = 'http://localhost:5000/api';\n\n\n\nfunction App() {\n  const [predictions, setPredictions] = useState([]);\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    axios.get(`${baseURL}/get`).then((res) => {\n      setPredictions(res.data);\n      console.log(res.data);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n\n    const data = predictions.reduce((acc, item) => {\n      const date = new Date(item.date).toLocaleDateString('en-US', {\n        weekday: 'long',      });\n      const count = acc[date] ? acc[date][item.prediction] + 1 : 1;\n      acc[date] = {\n        [item.prediction]: count,\n        date,\n      };\n      return acc;\n    }, {});\n\n    const chartData = {\n      labels: Object.keys(data),\n      datasets: [\n        {\n          label: 'Attacks',\n          data: Object.values(data).map((d) => d['ATTACK'] || 0),\n          backgroundColor: 'blue',\n        },\n        {\n          label: 'Benign',\n          data: Object.values(data).map((d) => d['BENIGN'] || 0),\n          backgroundColor: 'green',\n        },\n      ],\n    };\n\n    const chartConfig = {\n      type: 'bar',\n      data: chartData,\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true,\n          },\n        },\n      },\n    };\n\n    const ctx = document.getElementById('myChart').getContext('2d');\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n    chartRef.current = new Chart(ctx, chartConfig);\n  }, [predictions]);\n\n  return (\n    <div>\n      <canvas id=\"myChart\"></canvas>\n    </div>\n  );\n}\n\nexport default App;\n\n*/\n/*\nimport React, { useEffect, useState } from 'react'\nimport axios from 'axios';\n\n// Command to run the frontend \"npm start\"\n\nconst baseURL = 'http://localhost:5000/api';\n\nfunction App() {\n  const [predictions, setPredictions] = useState([]);\n\n  useEffect(() =>  {\n    axios.get(`${baseURL}/get`)\n    .then((res) => {\n      //console.log(res.data);\n      setPredictions(res.data);\n    });\n  },);\n  \n  return (\n    <div>\n      {predictions.map(item => (\n        <div key={item._id}>\n          <h2>{item.prediction}</h2>\n          <p>{item.date}</p>\n        </div>\n      ))}\n      \n    </div>\n  )\n}\n\nexport default App\n*/"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAElDD,SAAS,CAAC,MAAM;IACdE,KAAK,CAACS,GAAG,CAAE,GAAEL,OAAQ,MAAK,CAAC,CAACM,IAAI,CAAEC,GAAG,IAAK;MACxCH,cAAc,CAACG,GAAG,CAACC,IAAI,CAAC;IAC1B,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACET,OAAA;IAAAU,QAAA,eACEV,OAAA,CAACF,KAAK;MAACW,IAAI,EAAEL;IAAY;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAG;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACxB;AAEV;AAACX,EAAA,CAdQD,GAAG;AAAAa,EAAA,GAAHb,GAAG;AAgBZ,eAAeA,GAAG;;AAGljCA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}