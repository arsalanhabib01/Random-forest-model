{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\habibars\\\\Downloads\\\\Network monitoring\\\\intrusion_detection\\\\Random forest model\\\\dashboard\\\\frontend\\\\src\\\\components\\\\AvgTimeChart.js\",\n  _s = $RefreshSig$();\n/*\r\nimport { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction AvgTimeChart({ predictions }) {\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n\r\n    // Calculate the average prediction time for each day\r\n    const timePrediction = {};\r\n    const predictionCounts = {};\r\n    predictions.forEach(prediction => {\r\n      const date = new Date(prediction.date).toLocaleDateString('en-US');\r\n      const time = prediction.time; \r\n\r\n      if (timePrediction[date]) {\r\n        timePrediction[date] += time;\r\n        predictionCounts[date] += 1;\r\n      } else {\r\n        timePrediction[date] = time;\r\n        predictionCounts[date] = 1;\r\n      }\r\n    });\r\n\r\n    const avgTime = {};\r\n    for (const date in timePrediction) {\r\n      //console.log(date, timePrediction[date], predictionCounts[date])\r\n      avgTime[date] = timePrediction[date] / predictionCounts[date];\r\n    }\r\n\r\n    const chartData = {\r\n      labels: Object.keys(avgTime),\r\n      datasets: [\r\n        {\r\n          label: 'Average prediction time',\r\n          data: Object.values(avgTime),\r\n          backgroundColor: 'orange',\r\n        },\r\n      ],\r\n    };\r\n\r\n    const chartConfig = {\r\n      type: 'bar',\r\n      data: chartData,\r\n      options: {\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'Average prediction time by day'\r\n          }\r\n        },\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    const ctx = document.getElementById('AvgTimeChart').getContext('2d');\r\n   \r\n    chartRef.current = new Chart(ctx, chartConfig);\r\n  }, [predictions]);\r\n\r\n  return <canvas id=\"AvgTimeChart\"></canvas>;\r\n}\r\n\r\nexport default AvgTimeChart;\r\n*/\n\nimport { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AvgTimeChart(_ref) {\n  _s();\n  let {\n    predictions\n  } = _ref;\n  const chartRef = useRef(null);\n\n  // This useEffect hook runs whenever the \"predictions\" prop changes.\n  useEffect(() => {\n    // Destroy the previous chart instance, if any.\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n\n    // Transform the \"predictions\" data into a format that can be used by the chart.\n    const data = predictions.reduce((acc, item) => {\n      const date = new Date(item.date).toLocaleDateString('en-US');\n      const time = item.time;\n      const predictionCounts = {};\n      const countByDate = acc[date] || {\n        //XSS: 0,\n        //DDoS: 0,\n        //BENIGN: 0,\n        time,\n        date\n      };\n      countByDate[item.date] += time;\n      predictionCounts[date] += 1;\n      acc[date] = countByDate;\n      console.log(predictionCounts);\n      return acc;\n    }, {});\n\n    // Define the chart data and options.\n    const chartData = {\n      labels: Object.keys(data),\n      datasets: [{\n        label: 'XSS',\n        data: Object.values(data).map(prediction => prediction.time || 0),\n        backgroundColor: 'blue'\n      }]\n    };\n    const chartConfig = {\n      type: 'bar',\n      data: chartData,\n      options: {\n        maintainAspectRatio: false,\n        plugins: {\n          title: {\n            display: true,\n            text: 'Number of XSS and DDoS attacks by weekday'\n          }\n        },\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    };\n\n    // Get the canvas context and create a new chart instance.\n    const ctx = document.getElementById('AvgTimeChart').getContext('2d');\n    chartRef.current = new Chart(ctx, chartConfig);\n  }, [predictions]); // The \"predictions\" prop is the dependency of this useEffect hook.\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"AvgTimeChart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 10\n  }, this);\n}\n_s(AvgTimeChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = AvgTimeChart;\nexport default AvgTimeChart;\nvar _c;\n$RefreshReg$(_c, \"AvgTimeChart\");","map":{"version":3,"names":["useEffect","useRef","Chart","jsxDEV","_jsxDEV","AvgTimeChart","_ref","_s","predictions","chartRef","current","destroy","data","reduce","acc","item","date","Date","toLocaleDateString","time","predictionCounts","countByDate","console","log","chartData","labels","Object","keys","datasets","label","values","map","prediction","backgroundColor","chartConfig","type","options","maintainAspectRatio","plugins","title","display","text","scales","y","beginAtZero","ctx","document","getElementById","getContext","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/habibars/Downloads/Network monitoring/intrusion_detection/Random forest model/dashboard/frontend/src/components/AvgTimeChart.js"],"sourcesContent":["/*\r\nimport { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction AvgTimeChart({ predictions }) {\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n\r\n    // Calculate the average prediction time for each day\r\n    const timePrediction = {};\r\n    const predictionCounts = {};\r\n    predictions.forEach(prediction => {\r\n      const date = new Date(prediction.date).toLocaleDateString('en-US');\r\n      const time = prediction.time; \r\n\r\n      if (timePrediction[date]) {\r\n        timePrediction[date] += time;\r\n        predictionCounts[date] += 1;\r\n      } else {\r\n        timePrediction[date] = time;\r\n        predictionCounts[date] = 1;\r\n      }\r\n    });\r\n\r\n    const avgTime = {};\r\n    for (const date in timePrediction) {\r\n      //console.log(date, timePrediction[date], predictionCounts[date])\r\n      avgTime[date] = timePrediction[date] / predictionCounts[date];\r\n    }\r\n\r\n    const chartData = {\r\n      labels: Object.keys(avgTime),\r\n      datasets: [\r\n        {\r\n          label: 'Average prediction time',\r\n          data: Object.values(avgTime),\r\n          backgroundColor: 'orange',\r\n        },\r\n      ],\r\n    };\r\n\r\n    const chartConfig = {\r\n      type: 'bar',\r\n      data: chartData,\r\n      options: {\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'Average prediction time by day'\r\n          }\r\n        },\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    const ctx = document.getElementById('AvgTimeChart').getContext('2d');\r\n   \r\n    chartRef.current = new Chart(ctx, chartConfig);\r\n  }, [predictions]);\r\n\r\n  return <canvas id=\"AvgTimeChart\"></canvas>;\r\n}\r\n\r\nexport default AvgTimeChart;\r\n*/\r\n\r\nimport { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction AvgTimeChart({ predictions }) {\r\n  const chartRef = useRef(null);\r\n\r\n  // This useEffect hook runs whenever the \"predictions\" prop changes.\r\n  useEffect(() => {\r\n    // Destroy the previous chart instance, if any.\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n\r\n    // Transform the \"predictions\" data into a format that can be used by the chart.\r\n    const data = predictions.reduce((acc, item) => {\r\n      const date = new Date(item.date).toLocaleDateString('en-US');\r\n      const time = item.time; \r\n      const predictionCounts={}\r\n      const countByDate = acc[date] || {\r\n        //XSS: 0,\r\n        //DDoS: 0,\r\n        //BENIGN: 0,\r\n        time,\r\n        date,\r\n      };\r\n      \r\n      countByDate[item.date] += time;\r\n      predictionCounts[date] += 1;\r\n      acc[date] = countByDate;\r\n      console.log(predictionCounts);\r\n      return acc;\r\n    }, {});\r\n    \r\n  \r\n    // Define the chart data and options.\r\n    const chartData = {\r\n      labels: Object.keys(data),\r\n      datasets: [\r\n        {\r\n          label: 'XSS' ,\r\n          data: Object.values(data).map((prediction) => prediction.time || 0),\r\n          backgroundColor: 'blue',\r\n        },\r\n      ],\r\n    };\r\n\r\n    const chartConfig = {\r\n      type: 'bar',\r\n      data: chartData,\r\n      options: {\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'Number of XSS and DDoS attacks by weekday'\r\n          }\r\n        },\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    // Get the canvas context and create a new chart instance.\r\n    const ctx = document.getElementById('AvgTimeChart').getContext('2d');\r\n  \r\n    chartRef.current = new Chart(ctx, chartConfig);\r\n  }, [predictions]); // The \"predictions\" prop is the dependency of this useEffect hook.\r\n\r\n  return <canvas id=\"AvgTimeChart\"></canvas>;\r\n}\r\n\r\nexport default AvgTimeChart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}