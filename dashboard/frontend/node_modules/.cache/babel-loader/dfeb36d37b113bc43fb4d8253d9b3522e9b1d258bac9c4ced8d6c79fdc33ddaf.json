{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\habibars\\\\Downloads\\\\Network monitoring\\\\intrusion_detection\\\\Random forest model\\\\dashboard\\\\frontend\\\\src\\\\components\\\\BarChart.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BarChart(_ref) {\n  _s();\n  let {\n    predictions\n  } = _ref;\n  const chartRef = useRef(null);\n\n  // This useEffect hook runs whenever the \"predictions\" prop changes.\n  useEffect(() => {\n    // Destroy the previous chart instance, if any.\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n\n    // Transform the \"predictions\" data into a format that can be used by the chart.\n    const data = predictions.reduce((acc, item) => {\n      const date = new Date(item.date).toLocaleDateString('en-US', {\n        weekday: 'long'\n      });\n      const count = acc[date] ? acc[date][item.prediction] + 1 : 1;\n      acc[date] = {\n        [item.prediction]: count,\n        date\n      };\n      return acc;\n    }, {});\n\n    // Define the chart data and options.\n    const chartData = {\n      labels: Object.keys(data),\n      datasets: [{\n        label: 'Attacks',\n        data: Object.values(data).map(d => !d['ATTACK'] || 0),\n        backgroundColor: 'blue'\n      }, {\n        label: 'Benign',\n        data: Object.values(data).map(d => d['BENIGN'] || 0),\n        backgroundColor: 'green'\n      }]\n    };\n    const chartConfig = {\n      type: 'bar',\n      data: chartData,\n      options: {\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        },\n        onClick: (event, chartElement) => {\n          if (chartElement.length > 0) {\n            const chartData = chartRef.current.data.datasets[chartElement[0].datasetIndex].data;\n            const label = chartRef.current.data.labels[chartElement[0].index];\n            const predictionType = chartRef.current.data.datasets[chartElement[0].datasetIndex].label;\n            const count = chartData[chartElement[0].index];\n            console.log(`Clicked on ${label} with ${count} ${predictionType} predictions`);\n            // Add your code to open a new page and show more details here\n            //window.open(`/details?label=${label}&count=${count}`);\n          }\n        }\n      }\n    };\n\n    // Get the canvas context and create a new chart instance.\n    const ctx = document.getElementById('BarChart').getContext('2d');\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n    chartRef.current = new Chart(ctx, chartConfig);\n  }, [predictions]); // The \"predictions\" prop is the dependency of this useEffect hook.\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"BarChart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 10\n  }, this);\n}\n_s(BarChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = BarChart;\nexport default BarChart;\nvar _c;\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["useEffect","useRef","Chart","jsxDEV","_jsxDEV","BarChart","_ref","_s","predictions","chartRef","current","destroy","data","reduce","acc","item","date","Date","toLocaleDateString","weekday","count","prediction","chartData","labels","Object","keys","datasets","label","values","map","d","backgroundColor","chartConfig","type","options","maintainAspectRatio","scales","y","beginAtZero","onClick","event","chartElement","length","datasetIndex","index","predictionType","console","log","ctx","document","getElementById","getContext","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/habibars/Downloads/Network monitoring/intrusion_detection/Random forest model/dashboard/frontend/src/components/BarChart.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction BarChart({ predictions }) {\r\n  const chartRef = useRef(null);\r\n\r\n  \r\n  // This useEffect hook runs whenever the \"predictions\" prop changes.\r\n  useEffect(() => {\r\n    // Destroy the previous chart instance, if any.\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n\r\n    // Transform the \"predictions\" data into a format that can be used by the chart.\r\n    const data = predictions.reduce((acc, item) => {\r\n      const date = new Date(item.date).toLocaleDateString('en-US', {\r\n        weekday: 'long',\r\n      });\r\n      const count = acc[date] ? acc[date][item.prediction] + 1 : 1;\r\n      acc[date] = {\r\n        [item.prediction]: count,\r\n        date,\r\n      };\r\n      return acc;\r\n    }, {});\r\n\r\n    // Define the chart data and options.\r\n    const chartData = {\r\n      labels: Object.keys(data),\r\n      datasets: [\r\n        {\r\n          label: 'Attacks',\r\n          data: Object.values(data).map((d) => !d['ATTACK'] || 0),\r\n          backgroundColor: 'blue',\r\n        },\r\n        {\r\n          label: 'Benign',\r\n          data: Object.values(data).map((d) => d['BENIGN'] || 0),\r\n          backgroundColor: 'green',\r\n        },\r\n      ],\r\n    };\r\n\r\n    const chartConfig = {\r\n      type: 'bar',\r\n      data: chartData,\r\n      options: {\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n        onClick: (event, chartElement) => {\r\n          if (chartElement.length > 0) {\r\n            const chartData = chartRef.current.data.datasets[chartElement[0].datasetIndex].data;\r\n            const label = chartRef.current.data.labels[chartElement[0].index];\r\n            const predictionType = chartRef.current.data.datasets[chartElement[0].datasetIndex].label;\r\n            const count = chartData[chartElement[0].index];\r\n            console.log(`Clicked on ${label} with ${count} ${predictionType} predictions`);\r\n            // Add your code to open a new page and show more details here\r\n            //window.open(`/details?label=${label}&count=${count}`);\r\n          }\r\n        },\r\n      },\r\n    };\r\n\r\n    \r\n\r\n    // Get the canvas context and create a new chart instance.\r\n    const ctx = document.getElementById('BarChart').getContext('2d');\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n    chartRef.current = new Chart(ctx, chartConfig);\r\n\r\n  }, [predictions]); // The \"predictions\" prop is the dependency of this useEffect hook.\r\n\r\n  return <canvas id=\"BarChart\"></canvas>;\r\n}\r\n\r\nexport default BarChart;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}