{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\habibars\\\\Downloads\\\\Network monitoring\\\\intrusion_detection\\\\Random forest model\\\\dashboard\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport BarChart from './components/BarChart';\nimport PieChart from './components/PieChart';\nimport LineChart from './components/LineChart';\nimport DoughnutChart from './components/DoughnutChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = 'http://localhost:5000/api';\nfunction App() {\n  _s();\n  const [predictions, setPredictions] = useState([]);\n\n  // This useEffect hook runs once, when the component is mounted.\n  useEffect(() => {\n    // Fetch the data from the API and update the state with it.\n    axios.get(`${baseURL}/get`).then(res => {\n      setPredictions(res.data);\n      //console.log(res.data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"heading\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: /*#__PURE__*/_jsxDEV(BarChart, {\n          predictions: predictions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: /*#__PURE__*/_jsxDEV(PieChart, {\n          predictions: predictions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: /*#__PURE__*/_jsxDEV(DoughnutChart, {\n          predictions: predictions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          predictions: predictions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zH5rPFTlWYOw2PPwe/kdtH2YoqI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","BarChart","PieChart","LineChart","DoughnutChart","jsxDEV","_jsxDEV","baseURL","App","_s","predictions","setPredictions","get","then","res","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/habibars/Downloads/Network monitoring/intrusion_detection/Random forest model/dashboard/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport BarChart from './components/BarChart';\nimport PieChart from './components/PieChart';\nimport LineChart from './components/LineChart';\nimport DoughnutChart from './components/DoughnutChart';\n\nconst baseURL = 'http://localhost:5000/api';\n\nfunction App() {\n  const [predictions, setPredictions] = useState([]);\n\n  // This useEffect hook runs once, when the component is mounted.\n  useEffect(() => {\n    // Fetch the data from the API and update the state with it.\n    axios.get(`${baseURL}/get`).then((res) => {\n      setPredictions(res.data);\n      //console.log(res.data);\n    });\n  }, []);\n\n  return (\n    <div className='heading'>    \n    <div className='grid-container'>\n      {/* Render the ChartComponent and pass the predictions state as a prop. */}\n      <div className='grid-item'>\n        <BarChart predictions={predictions} />\n      </div>\n      <div className='grid-item'>\n        <PieChart predictions={predictions} />\n      </div>\n      <div className='grid-item'>\n        <DoughnutChart predictions={predictions} />\n      </div>\n      <div className='grid-item'>\n        <LineChart predictions={predictions} />\n      </div>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,aAAa,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACAD,SAAS,CAAC,MAAM;IACd;IACAE,KAAK,CAACY,GAAG,CAAE,GAAEL,OAAQ,MAAK,CAAC,CAACM,IAAI,CAAEC,GAAG,IAAK;MACxCH,cAAc,CAACG,GAAG,CAACC,IAAI,CAAC;MACxB;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACET,OAAA;IAAKU,SAAS,EAAC,SAAS;IAAAC,QAAA,eACxBX,OAAA;MAAKU,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAE7BX,OAAA;QAAKU,SAAS,EAAC,WAAW;QAAAC,QAAA,eACxBX,OAAA,CAACL,QAAQ;UAACS,WAAW,EAAEA;QAAY;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAClC,eACNf,OAAA;QAAKU,SAAS,EAAC,WAAW;QAAAC,QAAA,eACxBX,OAAA,CAACJ,QAAQ;UAACQ,WAAW,EAAEA;QAAY;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAClC,eACNf,OAAA;QAAKU,SAAS,EAAC,WAAW;QAAAC,QAAA,eACxBX,OAAA,CAACF,aAAa;UAACM,WAAW,EAAEA;QAAY;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACvC,eACNf,OAAA;QAAKU,SAAS,EAAC,WAAW;QAAAC,QAAA,eACxBX,OAAA,CAACH,SAAS;UAACO,WAAW,EAAEA;QAAY;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACnC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACA;AAEV;AAACZ,EAAA,CA/BQD,GAAG;AAAAc,EAAA,GAAHd,GAAG;AAiCZ,eAAeA,GAAG;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}