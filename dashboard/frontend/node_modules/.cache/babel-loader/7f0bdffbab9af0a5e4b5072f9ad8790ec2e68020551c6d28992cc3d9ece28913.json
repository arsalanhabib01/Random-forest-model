{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\habibars\\\\Downloads\\\\Network monitoring\\\\intrusion_detection\\\\Random forest model\\\\dashboard\\\\frontend\\\\src\\\\components\\\\PieChart.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PieChart(_ref) {\n  _s();\n  let {\n    predictions\n  } = _ref;\n  const chartRef = useRef(null);\n\n  // This useEffect hook runs whenever the \"predictions\" prop changes.\n  useEffect(() => {\n    // Destroy the previous chart instance, if any.\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n\n    // Transform the \"predictions\" data into a format that can be used by the chart.\n    const data = predictions.reduce((acc, item) => {\n      const date = new Date(item.date).toLocaleDateString('en-US', {\n        //weekday: 'long',\n      });\n      const count = acc[date] ? acc[date][item.prediction] + 1 : 1;\n      acc[date] = {\n        [item.prediction]: count,\n        date\n      };\n      return acc;\n    }, {});\n\n    // Define the chart data and options.\n    const chartData = {\n      labels: Object.keys(data),\n      datasets: [{\n        label: 'Total Attacks',\n        data: Object.values(data).map(d => d['ATTACK'] || 0),\n        backgroundColor: 'blue'\n      }, {\n        label: 'Total Benign',\n        data: Object.values(data).map(d => d['BENIGN'] || 0),\n        backgroundColor: 'green'\n      }]\n    };\n    const chartConfig = {\n      type: 'pie',\n      data: chartData,\n      options: {\n        maintainAspectRatio: false,\n        plugins: {\n          title: {\n            display: true,\n            text: 'Chart.js Stacked Line/Bar Chart'\n          }\n        },\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    };\n\n    // Get the canvas context and create a new chart instance.\n    const ctx = document.getElementById('PieChart').getContext('2d');\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n    chartRef.current = new Chart(ctx, chartConfig);\n  }, [predictions]); // The \"predictions\" prop is the dependency of this useEffect hook.\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"PieChart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 10\n  }, this);\n}\n_s(PieChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = PieChart;\nexport default PieChart;\nvar _c;\n$RefreshReg$(_c, \"PieChart\");","map":{"version":3,"names":["useEffect","useRef","Chart","jsxDEV","_jsxDEV","PieChart","_ref","_s","predictions","chartRef","current","destroy","data","reduce","acc","item","date","Date","toLocaleDateString","count","prediction","chartData","labels","Object","keys","datasets","label","values","map","d","backgroundColor","chartConfig","type","options","maintainAspectRatio","plugins","title","display","text","scales","y","beginAtZero","ctx","document","getElementById","getContext","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/habibars/Downloads/Network monitoring/intrusion_detection/Random forest model/dashboard/frontend/src/components/PieChart.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction PieChart({ predictions }) {\r\n  const chartRef = useRef(null);\r\n\r\n  \r\n  // This useEffect hook runs whenever the \"predictions\" prop changes.\r\n  useEffect(() => {\r\n    // Destroy the previous chart instance, if any.\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n\r\n    // Transform the \"predictions\" data into a format that can be used by the chart.\r\n    const data = predictions.reduce((acc, item) => {\r\n      const date = new Date(item.date).toLocaleDateString('en-US', {\r\n        //weekday: 'long',\r\n      });\r\n      const count = acc[date] ? acc[date][item.prediction] + 1 : 1;\r\n      acc[date] = {\r\n        [item.prediction]: count,\r\n        date,\r\n      };\r\n      return acc;\r\n    }, {});\r\n\r\n    // Define the chart data and options.\r\n    const chartData = {\r\n      labels: Object.keys(data),\r\n      datasets: [\r\n        {\r\n          label: 'Total Attacks',\r\n          data: Object.values(data).map((d) => d['ATTACK'] || 0),\r\n          backgroundColor: 'blue',\r\n        },\r\n        {\r\n          label: 'Total Benign',\r\n          data: Object.values(data).map((d) => d['BENIGN'] || 0),\r\n          backgroundColor: 'green',\r\n        },\r\n      ],\r\n    };\r\n\r\n    const chartConfig = {\r\n      type: 'pie',\r\n      data: chartData,\r\n      options: {\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'Chart.js Stacked Line/Bar Chart'\r\n          }\r\n        },    \r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    };\r\n    \r\n\r\n    // Get the canvas context and create a new chart instance.\r\n    const ctx = document.getElementById('PieChart').getContext('2d');\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n    chartRef.current = new Chart(ctx, chartConfig);\r\n\r\n  }, [predictions]); // The \"predictions\" prop is the dependency of this useEffect hook.\r\n\r\n  return <canvas id=\"PieChart\"></canvas>;\r\n}\r\n\r\nexport default PieChart;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,OAAOC,KAAK,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,QAAQA,CAAAC,IAAA,EAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAY,CAAC,GAAAF,IAAA;EAC/B,MAAMG,QAAQ,GAAGR,MAAM,CAAC,IAAI,CAAC;;EAG7B;EACAD,SAAS,CAAC,MAAM;IACd;IACA,IAAIS,QAAQ,CAACC,OAAO,EAAE;MACpBD,QAAQ,CAACC,OAAO,CAACC,OAAO,EAAE;IAC5B;;IAEA;IACA,MAAMC,IAAI,GAAGJ,WAAW,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;MAC7C,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,IAAI,CAACC,IAAI,CAAC,CAACE,kBAAkB,CAAC,OAAO,EAAE;QAC3D;MAAA,CACD,CAAC;MACF,MAAMC,KAAK,GAAGL,GAAG,CAACE,IAAI,CAAC,GAAGF,GAAG,CAACE,IAAI,CAAC,CAACD,IAAI,CAACK,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC;MAC5DN,GAAG,CAACE,IAAI,CAAC,GAAG;QACV,CAACD,IAAI,CAACK,UAAU,GAAGD,KAAK;QACxBH;MACF,CAAC;MACD,OAAOF,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEN;IACA,MAAMO,SAAS,GAAG;MAChBC,MAAM,EAAEC,MAAM,CAACC,IAAI,CAACZ,IAAI,CAAC;MACzBa,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,eAAe;QACtBd,IAAI,EAAEW,MAAM,CAACI,MAAM,CAACf,IAAI,CAAC,CAACgB,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACtDC,eAAe,EAAE;MACnB,CAAC,EACD;QACEJ,KAAK,EAAE,cAAc;QACrBd,IAAI,EAAEW,MAAM,CAACI,MAAM,CAACf,IAAI,CAAC,CAACgB,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACtDC,eAAe,EAAE;MACnB,CAAC;IAEL,CAAC;IAED,MAAMC,WAAW,GAAG;MAClBC,IAAI,EAAE,KAAK;MACXpB,IAAI,EAAES,SAAS;MACfY,OAAO,EAAE;QACPC,mBAAmB,EAAE,KAAK;QAC1BC,OAAO,EAAE;UACPC,KAAK,EAAE;YACLC,OAAO,EAAE,IAAI;YACbC,IAAI,EAAE;UACR;QACF,CAAC;QACDC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDC,WAAW,EAAE;UACf;QACF;MACF;IACF,CAAC;;IAGD;IACA,MAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC;IAChE,IAAIpC,QAAQ,CAACC,OAAO,EAAE;MACpBD,QAAQ,CAACC,OAAO,CAACC,OAAO,EAAE;IAC5B;IACAF,QAAQ,CAACC,OAAO,GAAG,IAAIR,KAAK,CAACwC,GAAG,EAAEX,WAAW,CAAC;EAEhD,CAAC,EAAE,CAACvB,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEnB,oBAAOJ,OAAA;IAAQ0C,EAAE,EAAC;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAU;AACxC;AAAC3C,EAAA,CAvEQF,QAAQ;AAAA8C,EAAA,GAAR9C,QAAQ;AAyEjB,eAAeA,QAAQ;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}