{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\habibars\\\\Downloads\\\\Network monitoring\\\\intrusion_detection\\\\Random forest model\\\\dashboard\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import requried libraries\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport BarChart from './components/BarChart';\nimport BenignDateChart from './components/BenignDateChart';\nimport AttackDateChart from './components/AttackDateChart';\nimport BenignHoursChart from './components/BenignHoursChart';\nimport AttackHoursChart from './components/AttackHoursChart';\nimport AvgTimeChart from './components/AvgTimeChart';\n\n//import XLSX from 'xlsx'; // Import the XLSX library for Excel file creation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  utils: XLSXUtils,\n  writeFile: writeExcelFile\n} = require('xlsx');\nconst baseURL = 'http://localhost:5000/api';\nfunction App() {\n  _s();\n  const [predictions, setPredictions] = useState([]);\n\n  // This useEffect hook runs once, when the component is mounted.\n  useEffect(() => {\n    // Fetch the data from the API and update the state with it.\n    axios.get(`${baseURL}/get`).then(res => {\n      setPredictions(res.data);\n    });\n  }, []);\n  const exportToExcel = () => {\n    const currentDate = new Date();\n    const formattedDate = currentDate.toISOString().slice(0, 10); // Get the current date in the format 'YYYY-MM-DD'\n    const dataByDate = {}; // Store predictions data by date\n\n    // Group predictions data by date\n    predictions.forEach(prediction => {\n      //const date = prediction.date;\n      const date1 = new Date(prediction.date).toLocaleDateString('en-US', {});\n      //console.log(date1);\n      if (!dataByDate[date1]) {\n        dataByDate[date1] = [];\n      }\n      dataByDate[date1].push(prediction);\n\n      // Check if there is data for the current date\n      if (dataByDate[formattedDate]) {\n        // Create the Excel workbook and worksheet\n        const workbook = XLSXUtils.book_new();\n        const worksheet = XLSXUtils.json_to_sheet(dataByDate[formattedDate]);\n        XLSXUtils.book_append_sheet(workbook, worksheet, formattedDate);\n\n        // Save the workbook as an Excel file with the current date\n        writeExcelFile(workbook, `C:/Users/habibars/Downloads/Network monitoring/intrusion_detection/Random forest model/excel files/predictions_${formattedDate}.xlsx`);\n      }\n    });\n\n    // Create the Excel workbook and worksheet\n    // const workbook = XLSXUtils.book_new();\n    // Object.keys(dataByDate).forEach((date) => {\n    //   const worksheet = XLSXUtils.json_to_sheet(dataByDate[date]);\n    //   XLSXUtils.book_append_sheet(workbook, worksheet, date);\n    // });\n\n    // Save the workbook as an Excel file\n\n    //writeExcelFile(workbook, \"C:/Users/habibars/Downloads/Network monitoring/intrusion_detection/Random forest model/excel files/predictions.xlsx\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: /*#__PURE__*/_jsxDEV(BarChart, {\n          predictions: predictions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: /*#__PURE__*/_jsxDEV(AttackDateChart, {\n          predictions: predictions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: /*#__PURE__*/_jsxDEV(BenignDateChart, {\n          predictions: predictions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: /*#__PURE__*/_jsxDEV(AvgTimeChart, {\n          predictions: predictions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: /*#__PURE__*/_jsxDEV(AttackHoursChart, {\n          predictions: predictions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: /*#__PURE__*/_jsxDEV(BenignHoursChart, {\n          predictions: predictions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: exportToExcel,\n      children: \"Export to Excel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zH5rPFTlWYOw2PPwe/kdtH2YoqI=\");\n_c = App;\nexport default App;\n\n// Note: Command to run the frontend \"npm start\"\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","BarChart","BenignDateChart","AttackDateChart","BenignHoursChart","AttackHoursChart","AvgTimeChart","jsxDEV","_jsxDEV","utils","XLSXUtils","writeFile","writeExcelFile","require","baseURL","App","_s","predictions","setPredictions","get","then","res","data","exportToExcel","currentDate","Date","formattedDate","toISOString","slice","dataByDate","forEach","prediction","date1","date","toLocaleDateString","push","workbook","book_new","worksheet","json_to_sheet","book_append_sheet","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/habibars/Downloads/Network monitoring/intrusion_detection/Random forest model/dashboard/frontend/src/App.js"],"sourcesContent":["// import requried libraries\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport BarChart from './components/BarChart';\nimport BenignDateChart from './components/BenignDateChart';\nimport AttackDateChart from './components/AttackDateChart';\nimport BenignHoursChart from './components/BenignHoursChart';\nimport AttackHoursChart from './components/AttackHoursChart';\nimport AvgTimeChart from './components/AvgTimeChart';\n\n//import XLSX from 'xlsx'; // Import the XLSX library for Excel file creation\nconst { utils: XLSXUtils, writeFile: writeExcelFile } = require('xlsx');\n\nconst baseURL = 'http://localhost:5000/api';\n\nfunction App() {\n  const [predictions, setPredictions] = useState([]);\n\n  // This useEffect hook runs once, when the component is mounted.\n  useEffect(() => {\n    // Fetch the data from the API and update the state with it.\n    axios.get(`${baseURL}/get`).then((res) => {\n      setPredictions(res.data);\n    });\n  }, []);\n\n  const exportToExcel = () => {\n    const currentDate = new Date();\n    const formattedDate = currentDate.toISOString().slice(0, 10); // Get the current date in the format 'YYYY-MM-DD'\n    const dataByDate = {}; // Store predictions data by date\n  \n    \n    // Group predictions data by date\n    predictions.forEach((prediction) => {\n      //const date = prediction.date;\n      const date1 = new Date(prediction.date).toLocaleDateString('en-US', {\n      });\n      //console.log(date1);\n      if (!dataByDate[date1]) {\n        dataByDate[date1] = [];\n      }\n      dataByDate[date1].push(prediction);   \n\n      // Check if there is data for the current date\n  if (dataByDate[formattedDate]) {\n    // Create the Excel workbook and worksheet\n    const workbook = XLSXUtils.book_new();\n    const worksheet = XLSXUtils.json_to_sheet(dataByDate[formattedDate]);\n    XLSXUtils.book_append_sheet(workbook, worksheet, formattedDate);\n\n    // Save the workbook as an Excel file with the current date\n    writeExcelFile(workbook, `C:/Users/habibars/Downloads/Network monitoring/intrusion_detection/Random forest model/excel files/predictions_${formattedDate}.xlsx`);\n  } \n});\n  \n    // Create the Excel workbook and worksheet\n   // const workbook = XLSXUtils.book_new();\n   // Object.keys(dataByDate).forEach((date) => {\n   //   const worksheet = XLSXUtils.json_to_sheet(dataByDate[date]);\n   //   XLSXUtils.book_append_sheet(workbook, worksheet, date);\n   // });\n  \n    // Save the workbook as an Excel file\n  \n    //writeExcelFile(workbook, \"C:/Users/habibars/Downloads/Network monitoring/intrusion_detection/Random forest model/excel files/predictions.xlsx\");\n  };\n  \n  return (\n    <div className='container'> \n      <h1>Dashboard</h1>   \n      <div className='grid-container'>\n\n        {/* Render the different Chart Components and pass the predictions state as a prop. */}\n        <div className='grid-item'>\n          <BarChart predictions={predictions} />\n        </div>\n        <div className='grid-item'>\n          <AttackDateChart predictions={predictions} />\n        </div>\n        <div className='grid-item'>\n          <BenignDateChart predictions={predictions} />\n        </div> \n        <div className='grid-item'>\n          <AvgTimeChart predictions={predictions} />\n        </div> \n        <div className='grid-item'>\n          <AttackHoursChart predictions={predictions} />\n        </div>\n        <div className='grid-item'>\n          <BenignHoursChart predictions={predictions} />\n        </div> \n\n      </div>\n      <button onClick={exportToExcel}>Export to Excel</button> {/* Add a button to trigger the Excel export */}\n    </div>\n  );\n}\n\nexport default App;\n\n// Note: Command to run the frontend \"npm start\""],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}