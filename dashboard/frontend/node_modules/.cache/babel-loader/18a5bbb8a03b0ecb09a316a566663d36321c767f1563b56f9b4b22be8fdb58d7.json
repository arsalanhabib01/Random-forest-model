{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\habibars\\\\Downloads\\\\Network monitoring\\\\intrusion_detection\\\\Random forest model\\\\dashboard\\\\frontend\\\\src\\\\components\\\\LineChart.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TimeChart(_ref) {\n  _s();\n  let {\n    predictions\n  } = _ref;\n  const chartRef = useRef(null);\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n\n    // Calculate the average prediction time for each day\n    const timePrediction = {};\n    const predictionCounts = {};\n    predictions.forEach(prediction => {\n      const date = new Date(prediction.date).toLocaleDateString('en-US');\n      const time = prediction.time;\n      if (timePrediction[date]) {\n        timePrediction[date] += time;\n        predictionCounts[date] += 1;\n      } else {\n        timePrediction[date] = time;\n        predictionCounts[date] = 1;\n      }\n    });\n    const avgTime = {};\n    for (const date in timePrediction) {\n      avgTime[date] = timePrediction[date] / predictionCounts[date];\n    }\n    const chartData = {\n      labels: Object.keys(avgTime),\n      datasets: [{\n        label: 'Average prediction time',\n        data: Object.values(avgTime),\n        backgroundColor: 'orange'\n      }]\n    };\n    const chartConfig = {\n      type: 'bar',\n      data: chartData,\n      options: {\n        maintainAspectRatio: false,\n        plugins: {\n          title: {\n            display: true,\n            text: 'Average prediction time by day'\n          }\n        },\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    };\n    const ctx = document.getElementById('TimeChart').getContext('2d');\n    chartRef.current = new Chart(ctx, chartConfig);\n  }, [predictions]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"TimeChart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 10\n  }, this);\n}\n_s(TimeChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = TimeChart;\nexport default TimeChart;\nvar _c;\n$RefreshReg$(_c, \"TimeChart\");","map":{"version":3,"names":["useEffect","useRef","Chart","jsxDEV","_jsxDEV","TimeChart","_ref","_s","predictions","chartRef","current","destroy","timePrediction","predictionCounts","forEach","prediction","date","Date","toLocaleDateString","time","avgTime","chartData","labels","Object","keys","datasets","label","data","values","backgroundColor","chartConfig","type","options","maintainAspectRatio","plugins","title","display","text","scales","y","beginAtZero","ctx","document","getElementById","getContext","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/habibars/Downloads/Network monitoring/intrusion_detection/Random forest model/dashboard/frontend/src/components/LineChart.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction TimeChart({ predictions }) {\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n\r\n    // Calculate the average prediction time for each day\r\n    const timePrediction = {};\r\n    const predictionCounts = {};\r\n    predictions.forEach(prediction => {\r\n      const date = new Date(prediction.date).toLocaleDateString('en-US');\r\n      const time = prediction.time; \r\n\r\n      if (timePrediction[date]) {\r\n        timePrediction[date] += time;\r\n        predictionCounts[date] += 1;\r\n      } else {\r\n        timePrediction[date] = time;\r\n        predictionCounts[date] = 1;\r\n      }\r\n    });\r\n\r\n    const avgTime = {};\r\n    for (const date in timePrediction) {\r\n      avgTime[date] = timePrediction[date] / predictionCounts[date];\r\n    }\r\n\r\n    const chartData = {\r\n      labels: Object.keys(avgTime),\r\n      datasets: [\r\n        {\r\n          label: 'Average prediction time',\r\n          data: Object.values(avgTime),\r\n          backgroundColor: 'orange',\r\n        },\r\n      ],\r\n    };\r\n\r\n    const chartConfig = {\r\n      type: 'bar',\r\n      data: chartData,\r\n      options: {\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'Average prediction time by day'\r\n          }\r\n        },\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    const ctx = document.getElementById('TimeChart').getContext('2d');\r\n   \r\n    chartRef.current = new Chart(ctx, chartConfig);\r\n  }, [predictions]);\r\n\r\n  return <canvas id=\"TimeChart\"></canvas>;\r\n}\r\n\r\nexport default TimeChart;\r\n\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,OAAOC,KAAK,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,SAASA,CAAAC,IAAA,EAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAY,CAAC,GAAAF,IAAA;EAChC,MAAMG,QAAQ,GAAGR,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,IAAIS,QAAQ,CAACC,OAAO,EAAE;MACpBD,QAAQ,CAACC,OAAO,CAACC,OAAO,EAAE;IAC5B;;IAEA;IACA,MAAMC,cAAc,GAAG,CAAC,CAAC;IACzB,MAAMC,gBAAgB,GAAG,CAAC,CAAC;IAC3BL,WAAW,CAACM,OAAO,CAACC,UAAU,IAAI;MAChC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAACC,IAAI,CAAC,CAACE,kBAAkB,CAAC,OAAO,CAAC;MAClE,MAAMC,IAAI,GAAGJ,UAAU,CAACI,IAAI;MAE5B,IAAIP,cAAc,CAACI,IAAI,CAAC,EAAE;QACxBJ,cAAc,CAACI,IAAI,CAAC,IAAIG,IAAI;QAC5BN,gBAAgB,CAACG,IAAI,CAAC,IAAI,CAAC;MAC7B,CAAC,MAAM;QACLJ,cAAc,CAACI,IAAI,CAAC,GAAGG,IAAI;QAC3BN,gBAAgB,CAACG,IAAI,CAAC,GAAG,CAAC;MAC5B;IACF,CAAC,CAAC;IAEF,MAAMI,OAAO,GAAG,CAAC,CAAC;IAClB,KAAK,MAAMJ,IAAI,IAAIJ,cAAc,EAAE;MACjCQ,OAAO,CAACJ,IAAI,CAAC,GAAGJ,cAAc,CAACI,IAAI,CAAC,GAAGH,gBAAgB,CAACG,IAAI,CAAC;IAC/D;IAEA,MAAMK,SAAS,GAAG;MAChBC,MAAM,EAAEC,MAAM,CAACC,IAAI,CAACJ,OAAO,CAAC;MAC5BK,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,yBAAyB;QAChCC,IAAI,EAAEJ,MAAM,CAACK,MAAM,CAACR,OAAO,CAAC;QAC5BS,eAAe,EAAE;MACnB,CAAC;IAEL,CAAC;IAED,MAAMC,WAAW,GAAG;MAClBC,IAAI,EAAE,KAAK;MACXJ,IAAI,EAAEN,SAAS;MACfW,OAAO,EAAE;QACPC,mBAAmB,EAAE,KAAK;QAC1BC,OAAO,EAAE;UACPC,KAAK,EAAE;YACLC,OAAO,EAAE,IAAI;YACbC,IAAI,EAAE;UACR;QACF,CAAC;QACDC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDC,WAAW,EAAE;UACf;QACF;MACF;IACF,CAAC;IAED,MAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC;IAEjEnC,QAAQ,CAACC,OAAO,GAAG,IAAIR,KAAK,CAACuC,GAAG,EAAEX,WAAW,CAAC;EAChD,CAAC,EAAE,CAACtB,WAAW,CAAC,CAAC;EAEjB,oBAAOJ,OAAA;IAAQyC,EAAE,EAAC;EAAW;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAU;AACzC;AAAC1C,EAAA,CAjEQF,SAAS;AAAA6C,EAAA,GAAT7C,SAAS;AAmElB,eAAeA,SAAS;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}