{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\habibars\\\\Downloads\\\\Network monitoring\\\\intrusion_detection\\\\Random forest model\\\\dashboard\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import requried libraries\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport BarChart from './components/BarChart';\nimport BenignDateChart from './components/BenignDateChart';\nimport AttackDateChart from './components/AttackDateChart';\nimport BenignHoursChart from './components/BenignHoursChart';\nimport AttackHoursChart from './components/AttackHoursChart';\nimport AvgTimeChart from './components/AvgTimeChart';\nimport XLSX from 'xlsx'; // Import the XLSX library for Excel file creation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = 'http://localhost:5000/api';\nfunction App() {\n  _s();\n  const [predictions, setPredictions] = useState([]);\n\n  // This useEffect hook runs once, when the component is mounted.\n  useEffect(() => {\n    // Fetch the data from the API and update the state with it.\n    axios.get(`${baseURL}/get`).then(res => {\n      setPredictions(res.data);\n    });\n  }, []);\n  const exportToExcel = () => {\n    const dataByDate = {}; // Store predictions data by date\n\n    // Group predictions data by date\n    predictions.forEach(prediction => {\n      const date = prediction.date;\n      if (!dataByDate[date]) {\n        dataByDate[date] = [];\n      }\n      dataByDate[date].push(prediction);\n    });\n\n    // Create the Excel workbook and worksheet\n    const workbook = XLSX.utils.book_new();\n    Object.keys(dataByDate).forEach(date => {\n      const worksheet = XLSX.utils.json_to_sheet(dataByDate[date]);\n      XLSX.utils.book_append_sheet(workbook, worksheet, date);\n    });\n\n    // Save the workbook as an Excel file\n    XLSX.writeFile(workbook, 'predictions.xlsx');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: /*#__PURE__*/_jsxDEV(BarChart, {\n          predictions: predictions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: /*#__PURE__*/_jsxDEV(AttackDateChart, {\n          predictions: predictions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: /*#__PURE__*/_jsxDEV(BenignDateChart, {\n          predictions: predictions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: /*#__PURE__*/_jsxDEV(AvgTimeChart, {\n          predictions: predictions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: /*#__PURE__*/_jsxDEV(AttackHoursChart, {\n          predictions: predictions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-item\",\n        children: /*#__PURE__*/_jsxDEV(BenignHoursChart, {\n          predictions: predictions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: exportToExcel,\n      children: \"Export to Excel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zH5rPFTlWYOw2PPwe/kdtH2YoqI=\");\n_c = App;\nexport default App;\n\n// Note: Command to run the frontend \"npm start\"\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","BarChart","BenignDateChart","AttackDateChart","BenignHoursChart","AttackHoursChart","AvgTimeChart","XLSX","jsxDEV","_jsxDEV","baseURL","App","_s","predictions","setPredictions","get","then","res","data","exportToExcel","dataByDate","forEach","prediction","date","push","workbook","utils","book_new","Object","keys","worksheet","json_to_sheet","book_append_sheet","writeFile","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/habibars/Downloads/Network monitoring/intrusion_detection/Random forest model/dashboard/frontend/src/App.js"],"sourcesContent":["// import requried libraries\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport BarChart from './components/BarChart';\nimport BenignDateChart from './components/BenignDateChart';\nimport AttackDateChart from './components/AttackDateChart';\nimport BenignHoursChart from './components/BenignHoursChart';\nimport AttackHoursChart from './components/AttackHoursChart';\nimport AvgTimeChart from './components/AvgTimeChart';\n\nimport XLSX from 'xlsx'; // Import the XLSX library for Excel file creation\n\nconst baseURL = 'http://localhost:5000/api';\n\nfunction App() {\n  const [predictions, setPredictions] = useState([]);\n\n  // This useEffect hook runs once, when the component is mounted.\n  useEffect(() => {\n    // Fetch the data from the API and update the state with it.\n    axios.get(`${baseURL}/get`).then((res) => {\n      setPredictions(res.data);\n    });\n  }, []);\n\n  const exportToExcel = () => {\n    const dataByDate = {}; // Store predictions data by date\n\n    // Group predictions data by date\n    predictions.forEach((prediction) => {\n      const date = prediction.date;\n      if (!dataByDate[date]) {\n        dataByDate[date] = [];\n      }\n      dataByDate[date].push(prediction);\n    });\n\n    // Create the Excel workbook and worksheet\n    const workbook = XLSX.utils.book_new();\n    Object.keys(dataByDate).forEach((date) => {\n      const worksheet = XLSX.utils.json_to_sheet(dataByDate[date]);\n      XLSX.utils.book_append_sheet(workbook, worksheet, date);\n    });\n\n    // Save the workbook as an Excel file\n    XLSX.writeFile(workbook, 'predictions.xlsx');\n  };\n\n  return (\n    <div className='container'> \n      <h1>Dashboard</h1>   \n      <div className='grid-container'>\n\n        {/* Render the different Chart Components and pass the predictions state as a prop. */}\n        <div className='grid-item'>\n          <BarChart predictions={predictions} />\n        </div>\n        <div className='grid-item'>\n          <AttackDateChart predictions={predictions} />\n        </div>\n        <div className='grid-item'>\n          <BenignDateChart predictions={predictions} />\n        </div> \n        <div className='grid-item'>\n          <AvgTimeChart predictions={predictions} />\n        </div> \n        <div className='grid-item'>\n          <AttackHoursChart predictions={predictions} />\n        </div>\n        <div className='grid-item'>\n          <BenignHoursChart predictions={predictions} />\n        </div> \n\n      </div>\n      <button onClick={exportToExcel}>Export to Excel</button> {/* Add a button to trigger the Excel export */}\n    </div>\n  );\n}\n\nexport default App;\n\n// Note: Command to run the frontend \"npm start\""],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}