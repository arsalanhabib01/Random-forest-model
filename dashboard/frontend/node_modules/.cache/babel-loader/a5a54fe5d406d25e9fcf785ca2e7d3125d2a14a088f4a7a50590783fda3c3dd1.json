{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\habibars\\\\Downloads\\\\Network monitoring\\\\intrusion_detection\\\\Random forest model\\\\dashboard\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import requried libraries\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport BarChart from './components/BarChart';\nimport BenignDateChart from './components/BenignDateChart';\nimport AttackDateChart from './components/AttackDateChart';\nimport BenignHoursChart from './components/BenignHoursChart';\nimport AttackHoursChart from './components/AttackHoursChart';\nimport AvgTimeChart from './components/AvgTimeChart';\n\n//import XLSX from 'xlsx'; // Import the XLSX library for Excel file creation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  utils: XLSXUtils,\n  writeFile: writeExcelFile\n} = require('xlsx');\nconst baseURL = 'http://localhost:5000/api';\nfunction App() {\n  _s();\n  const [predictions, setPredictions] = useState([]);\n\n  // This useEffect hook runs once, when the component is mounted.\n  useEffect(() => {\n    // Fetch the data from the API and update the state with it.\n    axios.get(`${baseURL}/get`).then(res => {\n      setPredictions(res.data);\n    });\n  }, []);\n  const exportToExcel = () => {\n    const currentDate = new Date();\n    const formattedDate = currentDate.toISOString().slice(0, 10); // Get the current date in the format 'YYYY-MM-DD'\n    const dataByDate = {}; // Store predictions data by date\n\n    // Group predictions data by date\n    predictions.forEach(prediction => {\n      //const date = prediction.date;\n      const date = new Date(prediction.date).toISOString().slice(0, 10);\n      //console.log(date1);\n      if (!dataByDate[date]) {\n        dataByDate[date] = [];\n      }\n      dataByDate[date].push(prediction);\n    });\n\n    // Create the Excel workbook and worksheet\n    const workbook = XLSXUtils.book_new();\n    Object.keys(dataByDate).forEach(date => {\n      console.log(date);\n      if (dataByDate[formattedDate]) {\n        //console.log(\"formatted date: \",dataByDate[formattedDate])\n        const worksheet = XLSXUtils.json_to_sheet(dataByDate[formattedDate]);\n        XLSXUtils.book_append_sheet(workbook, worksheet, formattedDate);\n      } else {\n        console.log('No predictions data available for the current date.');\n      }\n    });\n\n    // Save the workbook as an Excel file with the current date\n    writeExcelFile(workbook, `C:/Users/habibars/Downloads/Network monitoring/intrusion_detection/Random forest model/excel files/predictions_${formattedDate}.xlsx`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: exportToExcel,\n      children: \"Export to Excel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zH5rPFTlWYOw2PPwe/kdtH2YoqI=\");\n_c = App;\nexport default App;\n\n// Note: Command to run the frontend \"npm start\"\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","BarChart","BenignDateChart","AttackDateChart","BenignHoursChart","AttackHoursChart","AvgTimeChart","jsxDEV","_jsxDEV","utils","XLSXUtils","writeFile","writeExcelFile","require","baseURL","App","_s","predictions","setPredictions","get","then","res","data","exportToExcel","currentDate","Date","formattedDate","toISOString","slice","dataByDate","forEach","prediction","date","push","workbook","book_new","Object","keys","console","log","worksheet","json_to_sheet","book_append_sheet","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/habibars/Downloads/Network monitoring/intrusion_detection/Random forest model/dashboard/frontend/src/App.js"],"sourcesContent":["// import requried libraries\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport BarChart from './components/BarChart';\nimport BenignDateChart from './components/BenignDateChart';\nimport AttackDateChart from './components/AttackDateChart';\nimport BenignHoursChart from './components/BenignHoursChart';\nimport AttackHoursChart from './components/AttackHoursChart';\nimport AvgTimeChart from './components/AvgTimeChart';\n\n//import XLSX from 'xlsx'; // Import the XLSX library for Excel file creation\nconst { utils: XLSXUtils, writeFile: writeExcelFile } = require('xlsx');\n\nconst baseURL = 'http://localhost:5000/api';\n\nfunction App() {\n  const [predictions, setPredictions] = useState([]);\n\n  // This useEffect hook runs once, when the component is mounted.\n  useEffect(() => {\n    // Fetch the data from the API and update the state with it.\n    axios.get(`${baseURL}/get`).then((res) => {\n      setPredictions(res.data);\n    });\n  }, []);\n\n  const exportToExcel = () => {\n    const currentDate = new Date();\n    const formattedDate = currentDate.toISOString().slice(0, 10); // Get the current date in the format 'YYYY-MM-DD'\n    const dataByDate = {}; // Store predictions data by date\n  \n    \n    // Group predictions data by date\n    predictions.forEach((prediction) => {\n      //const date = prediction.date;\n      const date = new Date(prediction.date).toISOString().slice(0, 10);\n      //console.log(date1);\n      if (!dataByDate[date]) {\n        dataByDate[date] = [];\n      }\n      dataByDate[date].push(prediction);   \n    });\n\n    // Create the Excel workbook and worksheet\n    const workbook = XLSXUtils.book_new();\n    Object.keys(dataByDate).forEach((date) => {\n      console.log(date)\n  \n      if (dataByDate[formattedDate]) {\n        //console.log(\"formatted date: \",dataByDate[formattedDate])\n         const worksheet = XLSXUtils.json_to_sheet(dataByDate[formattedDate]);\n        XLSXUtils.book_append_sheet(workbook, worksheet, formattedDate);\n        } else {\n        console.log('No predictions data available for the current date.');\n       }\n   });\n  \n    // Save the workbook as an Excel file with the current date\n    writeExcelFile(workbook, `C:/Users/habibars/Downloads/Network monitoring/intrusion_detection/Random forest model/excel files/predictions_${formattedDate}.xlsx`);\n  };\n  \n  return (\n    <div className='container'> \n      <h1>Dashboard</h1>   \n      <div className='grid-container'>\n\n        {/* Render the different Chart Components and pass the predictions state as a prop. \n        <div className='grid-item'>\n          <BarChart predictions={predictions} />\n        </div>\n        <div className='grid-item'>\n          <AttackDateChart predictions={predictions} />\n        </div>\n        <div className='grid-item'>\n          <BenignDateChart predictions={predictions} />\n        </div> \n        <div className='grid-item'>\n          <AvgTimeChart predictions={predictions} />\n        </div> \n        <div className='grid-item'>\n          <AttackHoursChart predictions={predictions} />\n        </div>\n        <div className='grid-item'>\n          <BenignHoursChart predictions={predictions} />\n        </div> */}\n\n      </div>\n      <button onClick={exportToExcel}>Export to Excel</button> {/* Add a button to trigger the Excel export */}\n    </div>\n  );\n}\n\nexport default App;\n\n// Note: Command to run the frontend \"npm start\""],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}