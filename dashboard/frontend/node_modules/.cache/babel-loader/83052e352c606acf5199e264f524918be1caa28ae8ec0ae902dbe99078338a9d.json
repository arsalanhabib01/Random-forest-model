{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\habibars\\\\Downloads\\\\Network monitoring\\\\intrusion_detection\\\\Random forest model\\\\dashboard\\\\frontend\\\\src\\\\components\\\\AttackLineChart.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AttackLineChart(_ref) {\n  _s();\n  let {\n    predictions\n  } = _ref;\n  const chartRef = useRef(null);\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n\n    // Count the number of XSS and DDoS attacks for each hour of the day\n    const attackCounts = new Array(24).fill(0);\n    predictions.forEach(prediction => {\n      if (prediction.prediction === \"XSS\" || prediction.prediction === \"DDoS\") {\n        const date = new Date(prediction.date);\n        const hour = date.getHours();\n        attackCounts[hour] += 1;\n      }\n    });\n    const chartData = {\n      labels: Array.from({\n        length: 24\n      }, (_, i) => `${i}:00`),\n      datasets: [{\n        label: 'Number of attacks',\n        data: attackCounts,\n        backgroundColor: 'red'\n      }]\n    };\n    const chartConfig = {\n      type: 'line',\n      data: chartData,\n      options: {\n        maintainAspectRatio: false,\n        plugins: {\n          title: {\n            display: true,\n            text: 'Number of XSS and DDoS attacks by hour of the day'\n          }\n        },\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    };\n    const ctx = document.getElementById('AttackLineChart').getContext('2d');\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n    chartRef.current = new Chart(ctx, chartConfig);\n  }, [predictions]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"AttackLineChart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 10\n  }, this);\n}\n_s(AttackLineChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = AttackLineChart;\nexport default AttackLineChart;\nvar _c;\n$RefreshReg$(_c, \"AttackLineChart\");","map":{"version":3,"names":["useEffect","useRef","Chart","jsxDEV","_jsxDEV","AttackLineChart","_ref","_s","predictions","chartRef","current","destroy","attackCounts","Array","fill","forEach","prediction","date","Date","hour","getHours","chartData","labels","from","length","_","i","datasets","label","data","backgroundColor","chartConfig","type","options","maintainAspectRatio","plugins","title","display","text","scales","y","beginAtZero","ctx","document","getElementById","getContext","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/habibars/Downloads/Network monitoring/intrusion_detection/Random forest model/dashboard/frontend/src/components/AttackLineChart.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction AttackLineChart({ predictions }) {\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n\r\n    // Count the number of XSS and DDoS attacks for each hour of the day\r\n    const attackCounts = new Array(24).fill(0);\r\n    predictions.forEach(prediction => {\r\n      if (prediction.prediction === \"XSS\" || prediction.prediction === \"DDoS\") {\r\n        const date = new Date(prediction.date);\r\n        const hour = date.getHours();\r\n        attackCounts[hour] += 1;\r\n      }\r\n    });\r\n\r\n    const chartData = {\r\n      labels: Array.from({ length: 24 }, (_, i) => `${i}:00`),\r\n      datasets: [\r\n        {\r\n          label: 'Number of attacks',\r\n          data: attackCounts,\r\n          backgroundColor: 'red',\r\n        },\r\n      ],\r\n    };\r\n\r\n    const chartConfig = {\r\n      type: 'line',\r\n      data: chartData,\r\n      options: {\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'Number of XSS and DDoS attacks by hour of the day'\r\n          }\r\n        },\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    const ctx = document.getElementById('AttackLineChart').getContext('2d');\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n    chartRef.current = new Chart(ctx, chartConfig);\r\n  }, [predictions]);\r\n\r\n  return <canvas id=\"AttackLineChart\"></canvas>;\r\n}\r\n\r\nexport default AttackLineChart;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,OAAOC,KAAK,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,eAAeA,CAAAC,IAAA,EAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAY,CAAC,GAAAF,IAAA;EACtC,MAAMG,QAAQ,GAAGR,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,IAAIS,QAAQ,CAACC,OAAO,EAAE;MACpBD,QAAQ,CAACC,OAAO,CAACC,OAAO,EAAE;IAC5B;;IAEA;IACA,MAAMC,YAAY,GAAG,IAAIC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;IAC1CN,WAAW,CAACO,OAAO,CAACC,UAAU,IAAI;MAChC,IAAIA,UAAU,CAACA,UAAU,KAAK,KAAK,IAAIA,UAAU,CAACA,UAAU,KAAK,MAAM,EAAE;QACvE,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAACC,IAAI,CAAC;QACtC,MAAME,IAAI,GAAGF,IAAI,CAACG,QAAQ,EAAE;QAC5BR,YAAY,CAACO,IAAI,CAAC,IAAI,CAAC;MACzB;IACF,CAAC,CAAC;IAEF,MAAME,SAAS,GAAG;MAChBC,MAAM,EAAET,KAAK,CAACU,IAAI,CAAC;QAAEC,MAAM,EAAE;MAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAM,GAAEA,CAAE,KAAI,CAAC;MACvDC,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,mBAAmB;QAC1BC,IAAI,EAAEjB,YAAY;QAClBkB,eAAe,EAAE;MACnB,CAAC;IAEL,CAAC;IAED,MAAMC,WAAW,GAAG;MAClBC,IAAI,EAAE,MAAM;MACZH,IAAI,EAAER,SAAS;MACfY,OAAO,EAAE;QACPC,mBAAmB,EAAE,KAAK;QAC1BC,OAAO,EAAE;UACPC,KAAK,EAAE;YACLC,OAAO,EAAE,IAAI;YACbC,IAAI,EAAE;UACR;QACF,CAAC;QACDC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDC,WAAW,EAAE;UACf;QACF;MACF;IACF,CAAC;IAED,MAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,iBAAiB,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC;IACvE,IAAIpC,QAAQ,CAACC,OAAO,EAAE;MACpBD,QAAQ,CAACC,OAAO,CAACC,OAAO,EAAE;IAC5B;IACAF,QAAQ,CAACC,OAAO,GAAG,IAAIR,KAAK,CAACwC,GAAG,EAAEX,WAAW,CAAC;EAChD,CAAC,EAAE,CAACvB,WAAW,CAAC,CAAC;EAEjB,oBAAOJ,OAAA;IAAQ0C,EAAE,EAAC;EAAiB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAU;AAC/C;AAAC3C,EAAA,CAxDQF,eAAe;AAAA8C,EAAA,GAAf9C,eAAe;AA0DxB,eAAeA,eAAe;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}