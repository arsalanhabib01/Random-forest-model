{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\habibars\\\\Downloads\\\\Network monitoring\\\\intrusion_detection\\\\Random forest model\\\\dashboard\\\\frontend\\\\src\\\\components\\\\Chart.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChartComponent(_ref) {\n  _s();\n  let {\n    predictions\n  } = _ref;\n  const barChartRef = useRef(null);\n  const pieChartRef = useRef(null);\n\n  // This useEffect hook runs whenever the \"predictions\" prop changes.\n  useEffect(() => {\n    // Destroy the previous chart instances, if any.\n    if (barChartRef.current) {\n      barChartRef.current.destroy();\n    }\n    if (pieChartRef.current) {\n      pieChartRef.current.destroy();\n    }\n\n    // Transform the \"predictions\" data into a format that can be used by the charts.\n    const data = predictions.reduce((acc, item) => {\n      const date = new Date(item.date).toLocaleDateString('en-US', {\n        weekday: 'long'\n      });\n      const count = acc[date] ? acc[date][item.prediction] + 1 : 1;\n      acc[date] = {\n        [item.prediction]: count,\n        date\n      };\n      return acc;\n    }, {});\n\n    // Define the bar chart data and options.\n    const barChartData = {\n      labels: Object.keys(data),\n      datasets: [{\n        label: 'Attacks',\n        data: Object.values(data).map(d => d['ATTACK'] || 0),\n        backgroundColor: 'blue'\n      }, {\n        label: 'Benign',\n        data: Object.values(data).map(d => d['BENIGN'] || 0),\n        backgroundColor: 'green'\n      }]\n    };\n    const barChartConfig = {\n      type: 'bar',\n      data: barChartData,\n      options: {\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    };\n\n    // Define the pie chart data and options.\n    const pieChartData = {\n      labels: ['Attacks', 'Benign'],\n      datasets: [{\n        label: 'Predictions',\n        data: [Object.values(data).reduce((sum, d) => sum + (d['ATTACK'] || 0), 0), Object.values(data).reduce((sum, d) => sum + (d['BENIGN'] || 0), 0)],\n        backgroundColor: ['blue', 'green']\n      }]\n    };\n    const pieChartConfig = {\n      type: 'pie',\n      data: pieChartData,\n      options: {\n        maintainAspectRatio: false\n      }\n    };\n\n    // Get the canvas contexts and create new chart instances.\n    const barChartCtx = document.getElementById('barChart').getContext('2d');\n    const pieChartCtx = document.getElementById('pieChart').getContext('2d');\n    if (barChartRef.current) {\n      barChartRef.current.destroy();\n    }\n    if (pieChartRef.current) {\n      pieChartRef.current.destroy();\n    }\n    barChartRef.current = new Chart(barChartCtx, barChartConfig);\n    pieChartRef.current = new Chart(pieChartCtx, pieChartConfig);\n  }, [predictions]); // The \"predictions\" prop is the dependency of this useEffect hook.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"barChart\",\n      style: {\n        width: '800px',\n        height: '400px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"pieChart\",\n      style: {\n        width: '400px',\n        height: '400px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(ChartComponent, \"5SdjiMdeOrBNe76uOqTLSAlmsec=\");\n_c = ChartComponent;\nexport default ChartComponent;\n\n/*\r\nimport { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction ChartComponent({ predictions }) {\r\n  const chartRef = useRef(null);\r\n\r\n  \r\n  // This useEffect hook runs whenever the \"predictions\" prop changes.\r\n  useEffect(() => {\r\n    // Destroy the previous chart instance, if any.\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n\r\n    // Transform the \"predictions\" data into a format that can be used by the chart.\r\n    const data = predictions.reduce((acc, item) => {\r\n      const date = new Date(item.date).toLocaleDateString('en-US', {\r\n        weekday: 'long',\r\n      });\r\n      const count = acc[date] ? acc[date][item.prediction] + 1 : 1;\r\n      acc[date] = {\r\n        [item.prediction]: count,\r\n        date,\r\n      };\r\n      return acc;\r\n    }, {});\r\n\r\n    // Define the chart data and options.\r\n    const chartData = {\r\n      labels: Object.keys(data),\r\n      datasets: [\r\n        {\r\n          label: 'Attacks',\r\n          data: Object.values(data).map((d) => d['ATTACK'] || 0),\r\n          backgroundColor: 'blue',\r\n        },\r\n        {\r\n          label: 'Benign',\r\n          data: Object.values(data).map((d) => d['BENIGN'] || 0),\r\n          backgroundColor: 'green',\r\n        },\r\n      ],\r\n    };\r\n\r\n    const chartConfig = {\r\n      type: 'bar',\r\n      data: chartData,\r\n      options: {\r\n        maintainAspectRatio: false,\r\n       // width: 200,\r\n       // height: 400,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    };\r\n    \r\n\r\n    // Get the canvas context and create a new chart instance.\r\n    const ctx = document.getElementById('myChart').getContext('2d');\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n    chartRef.current = new Chart(ctx, chartConfig);\r\n\r\n  }, [predictions]); // The \"predictions\" prop is the dependency of this useEffect hook.\r\n\r\n  return <canvas id=\"myChart\" style={{ width: '800px', height: '400px' }}></canvas>;\r\n}\r\n\r\nexport default ChartComponent;\r\n*/\nvar _c;\n$RefreshReg$(_c, \"ChartComponent\");","map":{"version":3,"names":["useEffect","useRef","Chart","jsxDEV","_jsxDEV","ChartComponent","_ref","_s","predictions","barChartRef","pieChartRef","current","destroy","data","reduce","acc","item","date","Date","toLocaleDateString","weekday","count","prediction","barChartData","labels","Object","keys","datasets","label","values","map","d","backgroundColor","barChartConfig","type","options","maintainAspectRatio","scales","y","beginAtZero","pieChartData","sum","pieChartConfig","barChartCtx","document","getElementById","getContext","pieChartCtx","children","id","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/habibars/Downloads/Network monitoring/intrusion_detection/Random forest model/dashboard/frontend/src/components/Chart.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction ChartComponent({ predictions }) {\r\n  const barChartRef = useRef(null);\r\n  const pieChartRef = useRef(null);\r\n\r\n  // This useEffect hook runs whenever the \"predictions\" prop changes.\r\n  useEffect(() => {\r\n    // Destroy the previous chart instances, if any.\r\n    if (barChartRef.current) {\r\n      barChartRef.current.destroy();\r\n    }\r\n    if (pieChartRef.current) {\r\n      pieChartRef.current.destroy();\r\n    }\r\n\r\n    // Transform the \"predictions\" data into a format that can be used by the charts.\r\n    const data = predictions.reduce((acc, item) => {\r\n      const date = new Date(item.date).toLocaleDateString('en-US', {\r\n        weekday: 'long',\r\n      });\r\n      const count = acc[date] ? acc[date][item.prediction] + 1 : 1;\r\n      acc[date] = {\r\n        [item.prediction]: count,\r\n        date,\r\n      };\r\n      return acc;\r\n    }, {});\r\n\r\n    // Define the bar chart data and options.\r\n    const barChartData = {\r\n      labels: Object.keys(data),\r\n      datasets: [\r\n        {\r\n          label: 'Attacks',\r\n          data: Object.values(data).map((d) => d['ATTACK'] || 0),\r\n          backgroundColor: 'blue',\r\n        },\r\n        {\r\n          label: 'Benign',\r\n          data: Object.values(data).map((d) => d['BENIGN'] || 0),\r\n          backgroundColor: 'green',\r\n        },\r\n      ],\r\n    };\r\n\r\n    const barChartConfig = {\r\n      type: 'bar',\r\n      data: barChartData,\r\n      options: {\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    // Define the pie chart data and options.\r\n    const pieChartData = {\r\n      labels: ['Attacks', 'Benign'],\r\n      datasets: [\r\n        {\r\n          label: 'Predictions',\r\n          data: [\r\n            Object.values(data).reduce((sum, d) => sum + (d['ATTACK'] || 0), 0),\r\n            Object.values(data).reduce((sum, d) => sum + (d['BENIGN'] || 0), 0),\r\n          ],\r\n          backgroundColor: ['blue', 'green'],\r\n        },\r\n      ],\r\n    };\r\n\r\n    const pieChartConfig = {\r\n      type: 'pie',\r\n      data: pieChartData,\r\n      options: {\r\n        maintainAspectRatio: false,\r\n      },\r\n    };\r\n\r\n    // Get the canvas contexts and create new chart instances.\r\n    const barChartCtx = document.getElementById('barChart').getContext('2d');\r\n    const pieChartCtx = document.getElementById('pieChart').getContext('2d');\r\n    if (barChartRef.current) {\r\n      barChartRef.current.destroy();\r\n    }\r\n    if (pieChartRef.current) {\r\n      pieChartRef.current.destroy();\r\n    }\r\n    barChartRef.current = new Chart(barChartCtx, barChartConfig);\r\n    pieChartRef.current = new Chart(pieChartCtx, pieChartConfig);\r\n  }, [predictions]); // The \"predictions\" prop is the dependency of this useEffect hook.\r\n\r\n  return (\r\n    <div>\r\n      <canvas id=\"barChart\" style={{ width: '800px', height: '400px' }}></canvas>\r\n      <canvas id=\"pieChart\" style={{ width: '400px', height: '400px' }}></canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChartComponent;\r\n\r\n\r\n/*\r\nimport { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction ChartComponent({ predictions }) {\r\n  const chartRef = useRef(null);\r\n\r\n  \r\n  // This useEffect hook runs whenever the \"predictions\" prop changes.\r\n  useEffect(() => {\r\n    // Destroy the previous chart instance, if any.\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n\r\n    // Transform the \"predictions\" data into a format that can be used by the chart.\r\n    const data = predictions.reduce((acc, item) => {\r\n      const date = new Date(item.date).toLocaleDateString('en-US', {\r\n        weekday: 'long',\r\n      });\r\n      const count = acc[date] ? acc[date][item.prediction] + 1 : 1;\r\n      acc[date] = {\r\n        [item.prediction]: count,\r\n        date,\r\n      };\r\n      return acc;\r\n    }, {});\r\n\r\n    // Define the chart data and options.\r\n    const chartData = {\r\n      labels: Object.keys(data),\r\n      datasets: [\r\n        {\r\n          label: 'Attacks',\r\n          data: Object.values(data).map((d) => d['ATTACK'] || 0),\r\n          backgroundColor: 'blue',\r\n        },\r\n        {\r\n          label: 'Benign',\r\n          data: Object.values(data).map((d) => d['BENIGN'] || 0),\r\n          backgroundColor: 'green',\r\n        },\r\n      ],\r\n    };\r\n\r\n    const chartConfig = {\r\n      type: 'bar',\r\n      data: chartData,\r\n      options: {\r\n        maintainAspectRatio: false,\r\n       // width: 200,\r\n       // height: 400,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    };\r\n    \r\n\r\n    // Get the canvas context and create a new chart instance.\r\n    const ctx = document.getElementById('myChart').getContext('2d');\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n    chartRef.current = new Chart(ctx, chartConfig);\r\n\r\n  }, [predictions]); // The \"predictions\" prop is the dependency of this useEffect hook.\r\n\r\n  return <canvas id=\"myChart\" style={{ width: '800px', height: '400px' }}></canvas>;\r\n}\r\n\r\nexport default ChartComponent;\r\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}