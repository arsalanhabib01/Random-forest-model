{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\habibars\\\\Downloads\\\\Network monitoring\\\\intrusion_detection\\\\Random forest model\\\\dashboard\\\\frontend\\\\src\\\\components\\\\BarChart.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BarChart(_ref) {\n  _s();\n  let {\n    predictions\n  } = _ref;\n  const chartRef = useRef(null);\n\n  // This useEffect hook runs whenever the \"predictions\" prop changes.\n  useEffect(() => {\n    // Destroy the previous chart instance, if any.\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n\n    // Transform the \"predictions\" data into a format that can be used by the chart.\n    const data = predictions.reduce((acc, item) => {\n      const date = new Date(item.date).toLocaleDateString('en-US', {\n        //weekday: 'long',\n      });\n      const count = acc[date] ? acc[date][item.prediction] + 1 : 1;\n      acc[date] = {\n        [item.prediction]: count,\n        date\n      };\n      return acc;\n    }, {});\n\n    // Define the chart data and options.\n    const chartData = {\n      labels: Object.keys(data),\n      datasets: [{\n        label: 'Attacks',\n        data: Object.values(data).map(d => d['ATTACK'] || 0),\n        backgroundColor: 'blue'\n      }, {\n        label: 'Benign',\n        data: Object.values(data).map(d => d['BENIGN'] || 0),\n        backgroundColor: 'green'\n      }]\n    };\n\n    // Calculate and print the total number of \"BENIGN\" and \"ATTACK\" values\n    let totalBenign = 0;\n    let totalAttack = 0;\n    Object.values(data).forEach(d => {\n      totalBenign += d['BENIGN'] || 0;\n      totalAttack += d['ATTACK'] || 0;\n    });\n\n    // Create a custom tooltip to display the total number of \"BENIGN\" and \"ATTACK\" values\n    const customTooltip = {\n      callbacks: {\n        label: function (tooltipItem, chartData) {\n          let label = chartData.datasets[tooltipItem.datasetIndex].label || '';\n          if (label) {\n            label += ': ';\n          }\n          const value = tooltipItem.yLabel || 0;\n          if (chartData.datasets[tooltipItem.datasetIndex].label === 'Attacks') {\n            label += `${value} Attacks`;\n          } else {\n            label += `${value} Benign`;\n          }\n          return label;\n        },\n        afterLabel: function (tooltipItem, chartData) {\n          let label = '';\n          if (tooltipItem.datasetIndex === 0) {\n            label = `Total Attacks: ${totalAttack}`;\n          } else {\n            label = `Total Benign: ${totalBenign}`;\n          }\n          return label;\n        }\n      }\n    };\n\n    // Create the chart with the custom tooltip\n    const chartOptions = {\n      tooltips: customTooltip\n    };\n    const chartConfig = {\n      type: 'bar',\n      data: chartData,\n      options: {\n        chartOptions,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    };\n\n    // Get the canvas context and create a new chart instance.\n    const ctx = document.getElementById('BarChart').getContext('2d');\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n    chartRef.current = new Chart(ctx, chartConfig);\n  }, [predictions]); // The \"predictions\" prop is the dependency of this useEffect hook.\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"BarChart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 10\n  }, this);\n}\n_s(BarChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = BarChart;\nexport default BarChart;\nvar _c;\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["useEffect","useRef","Chart","jsxDEV","_jsxDEV","BarChart","_ref","_s","predictions","chartRef","current","destroy","data","reduce","acc","item","date","Date","toLocaleDateString","count","prediction","chartData","labels","Object","keys","datasets","label","values","map","d","backgroundColor","totalBenign","totalAttack","forEach","customTooltip","callbacks","tooltipItem","datasetIndex","value","yLabel","afterLabel","chartOptions","tooltips","chartConfig","type","options","maintainAspectRatio","scales","y","beginAtZero","ctx","document","getElementById","getContext","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/habibars/Downloads/Network monitoring/intrusion_detection/Random forest model/dashboard/frontend/src/components/BarChart.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction BarChart({ predictions }) {\r\n  const chartRef = useRef(null);\r\n\r\n  \r\n  // This useEffect hook runs whenever the \"predictions\" prop changes.\r\n  useEffect(() => {\r\n    // Destroy the previous chart instance, if any.\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n\r\n    // Transform the \"predictions\" data into a format that can be used by the chart.\r\n    const data = predictions.reduce((acc, item) => {\r\n      const date = new Date(item.date).toLocaleDateString('en-US', {\r\n        //weekday: 'long',\r\n      });\r\n      const count = acc[date] ? acc[date][item.prediction] + 1 : 1;\r\n      acc[date] = {\r\n        [item.prediction]: count,\r\n        date,\r\n      };\r\n      return acc;\r\n    }, {});\r\n\r\n    // Define the chart data and options.\r\n    const chartData = {\r\n      labels: Object.keys(data),\r\n      datasets: [\r\n        {\r\n          label: 'Attacks',\r\n          data: Object.values(data).map((d) => d['ATTACK'] || 0),\r\n          backgroundColor: 'blue',\r\n        },\r\n        {\r\n          label: 'Benign',\r\n          data: Object.values(data).map((d) => d['BENIGN'] || 0),\r\n          backgroundColor: 'green',\r\n        },\r\n      ],\r\n    };\r\n\r\n    \r\n// Calculate and print the total number of \"BENIGN\" and \"ATTACK\" values\r\nlet totalBenign = 0;\r\nlet totalAttack = 0;\r\nObject.values(data).forEach((d) => {\r\n  totalBenign += d['BENIGN'] || 0;\r\n  totalAttack += d['ATTACK'] || 0;\r\n});\r\n\r\n// Create a custom tooltip to display the total number of \"BENIGN\" and \"ATTACK\" values\r\nconst customTooltip = {\r\n  callbacks: {\r\n    label: function(tooltipItem, chartData) {\r\n      let label = chartData.datasets[tooltipItem.datasetIndex].label || '';\r\n      if (label) {\r\n        label += ': ';\r\n      }\r\n      const value = tooltipItem.yLabel || 0;\r\n      if (chartData.datasets[tooltipItem.datasetIndex].label === 'Attacks') {\r\n        label += `${value} Attacks`;\r\n      } else {\r\n        label += `${value} Benign`;\r\n      }\r\n      return label;\r\n    },\r\n    afterLabel: function(tooltipItem, chartData) {\r\n      let label = '';\r\n      if (tooltipItem.datasetIndex === 0) {\r\n        label = `Total Attacks: ${totalAttack}`;\r\n      } else {\r\n        label = `Total Benign: ${totalBenign}`;\r\n      }\r\n      return label;\r\n    }\r\n  }\r\n};\r\n\r\n// Create the chart with the custom tooltip\r\nconst chartOptions = {\r\n  tooltips: customTooltip\r\n};\r\n\r\n    const chartConfig = {\r\n      type: 'bar',\r\n      data: chartData,\r\n      options: {\r\n        chartOptions,\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    \r\n\r\n    // Get the canvas context and create a new chart instance.\r\n    const ctx = document.getElementById('BarChart').getContext('2d');\r\n    if (chartRef.current) {\r\n      chartRef.current.destroy();\r\n    }\r\n    chartRef.current = new Chart(ctx, chartConfig);\r\n\r\n  }, [predictions]); // The \"predictions\" prop is the dependency of this useEffect hook.\r\n\r\n  return <canvas id=\"BarChart\"></canvas>;\r\n}\r\n\r\nexport default BarChart;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}